<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="styleguide.xsl"?>
<GUIDE title="Google C++ Style Guide">

<p align="right">

Revision 3.274
</p>



<address>
Benjy Weinberger<br/>
Craig Silverstein<br/>
Gregory Eitzmann<br/>
Mark Mentovai<br/>
Tashana Landray
</address>

<OVERVIEW>
<CATEGORY title="반드시 알아둬야 할 것">
  <STYLEPOINT title="이 가이드의 숨겨진 상세를 보는 법">
     <SUMMARY>
       이 스타일 가이드는 처음에는 보이지 않는 숨겨진 많은 상세 항목을 가지고 
       있다. 이들은 여기 왼쪽에 있는 것처럼 삼각형 아이콘으로 표시된다. 그것을 
       눌러 보라. 아래에서 "안녕"이 나타날 것이다.
     </SUMMARY>
     <BODY>
       <p>
        안녕! 이제 당신은 더 많은 상세를 보기 위해 요점을 펼칠 수 있게 되었다. 
        혹은 이 문서 상단에 있는 "모두 펼치기"를 사용할 수 있다.
       </p>
     </BODY>
  </STYLEPOINT>
</CATEGORY>
<CATEGORY title="배경">
  <p>
    C++은 많은 구글의 오픈 소스 프로젝트에서 사용되는 주요한 개발 언어이다. 모든
    C++ 프로그래머가 알고 있듯이, C++ 언어는 많은 강력한 기능을 가지고 있다. 
    하지만 그 강력함은 복잡함을 야기하고 이 복잡성은 코드를 버그를 생기기 쉽게 
    만들거나 읽고 관리하기에 어렵게 만든다.
  </p>
  <p>
    이 가이드의 목표는 C++ 코드에서 해야 할 것과 하지 말아야 할 것을 자세하게 
    서술해서 복잡함을 관리하고자 하는 것이다. 이러한 규칙들은 코더들이 C++ 
    언어의 기능들을 여전히 생산적으로 사용하면서도 기반 코드를 관리할 수 있는 
    상태로 유지하기 위한 것이다.
  </p>
  <p>
    <em>스타일</em>이라는 것은, 혹은 가독성이라고도 하는데, 우리의 C++ 코드를 
    지배하는 컨벤션이라고 부르는 것이다. 이러한 컨벤션들은 단순한 소스 파일 
    포맷팅보다 훨씬 많은 것을 담고 있기 때문에 <em>스타일</em>이라는 용어는 다소
    그릇된 명칭이다.
  </p>
  <p>
    우리의 기반 코드를 관리할 수 있게 유지하는 한 가지 방법은 <em>일관성</em>을
    강제하는 것이다. 어떤 프로그래머라도 남의 코드를 볼 수 있고 쉽게 이해할 수
    있는 것은 매우 중요하다. 일치된 스타일을 유지하고 컨벤션에 따른다는 것은 
    우리가 더 쉽게 "패턴 일치"를 사용해서 다양한 기호들이 무엇이고 변치 않는
    숙어들이 무엇인지 추측할 수 있다는 것을 의미한다. 공통의 필요한 숙어들과 
    패턴을 만들게 되면 코드를 이해하는 게 많이 쉬워진다. 어떤 경우는 어떤 스타일 
    규칙을 바꾸자는 바람직한 논쟁이 있을 수 있지만, 그럼에도 불구하고 우리는
    일관성을 유지하고자 하는 목적에서 규칙을 기존대로 유지한다.
  </p>
  <p>
    이 가이드가 서술하는 또 다른 이슈는 C++ 기능이 비대해지고 있다는 것이다. 
    C++은 많은 고급 기능이 있는 거대한 언어이다. 어떤 경우에 우리는 어떤 기능의
    사용을 제한하거나 심지어 금지한다. 우리가 기능을 제한하거나 금지하는 것은
    코드를 간단하게 유지하기 위해서, 그리고 그 기능들이 흔히 만들 수 있는 
    문제들과 오류들을 피하기 위해서다. 이 가이드는 이러한 기능들을 수록하고 
    사용이 왜 제한되었는지 설명한다.
  </p>
  <p>
    구글에서 개발된 오픈 소스 프로젝트는 이 가이드의 요구사항을 따른다.
  </p>
  <p>
    이 가이드는 C++ 투토리얼이 아니다: 우리는 독자가 이 언어에 친숙하다고 
    가정한다.
  </p>
</CATEGORY>
</OVERVIEW>

<CATEGORY title="헤더 파일">
  <p>
    일반적으로 모든 <code>.cc</code> 파일은 수반된 <code>.h</code> 파일을 가져야
    한다. 유닛 테스트라거나 <code>main()</code> 함수만을 가진 작은 
    <code>.cc</code> 파일 등은 흔한 예외적인 경우다.
  </p>
  <p>
    헤더 파일의 바른 사용은 가독성과 파일 크기와 당신의 코드 성능에 엄청난 
    차이를 만든다.
  </p>
  <p>
    아래 규칙들은 헤더 파일을 사용할 때의 다양한 함정들에 관한 가이드이다.
  </p>

  <STYLEPOINT title="#define 가드">
    <SUMMARY>
      모든 헤더 파일은 여러 번 포함되지 않기 위해 <code>#define</code> 가드를 
      사용해야 한다. 기호의 포맷은
      <code><i>&lt;PROJECT&gt;</i>_<i>&lt;PATH&gt;</i>_<i>&lt;FILE&gt;</i>_H_</code>
      여야 한다.
    </SUMMARY>
    <BODY>
      <p>
        유일성을 보장하기 위해 <code>#define</code> 가드는 프로젝트의 소스 
        트리의 절대 경로에 기반해야 한다. 예를 들어 프로젝트에
        <code>foo/src/bar/baz.h</code> 파일이 있다면 <code>foo</code>는 
        아래와 같은 가드를 가져야 한다:
      </p>
      <CODE_SNIPPET>
         #ifndef FOO_BAR_BAZ_H_
         #define FOO_BAR_BAZ_H_

         ...

         #endif  // FOO_BAR_BAZ_H_
      </CODE_SNIPPET>
      
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="전방 선언">
    <SUMMARY>
        당신은 불필요한 <code>#include</code>를 피하기 위해 보통의 클래스를 전방
        선언할 수도 있다.
    </SUMMARY>
    <BODY>
      <DEFINITION>
          "전방 선언"이란 수반되는 정의없이 클래스나 함수, 탬플릿을 선언하는 
          것이다. 클라이언트 코드에서 어떤 기호가 실제로 사용되건 
          <code>#include</code> 라인은 종종 전방 선언으로 대체할 수 있다.
      </DEFINITION>
      <PROS>
        <ul>
          <li>불필요한 <code>#include</code>는 컴파일러가 더 많은 파일을 열고 더
          많은 입력을 처리하도록 만든다.</li>
          <li>불필요한 <code>#include</code>는 헤더 파일 변경 시 당신의 코드를 
          더 자주 다시 컴파일하도록 만든다.</li>
        </ul>
      </PROS>
      <CONS>
        <ul>
          <li>템플릿이나 typedef들이나 디폴트 인자들이나 using 선언들과 같은 
          기능들에 직면하면 전방 선언의 정확한 형태를 결정하기 힘들 수 있다.
          </li>
          <li>어떤 코드 조각에서 전방 선언이 필요한지 전체 
          <code>#include</code>가 필요한지 결정하기 힘들 수 있다. 특히 암시적 
          변환이 개입될 때 그렇다. 극단적인 경우에는 <code>#include</code>를 
          전방 선언으로 대체하면 코드의 의미가 조용히 바뀔 수도 있다.</li>
          <li>헤더에서 여러 기호를 전방 선언하는 것은 단순히 헤더를 
          <code>#include</code>하는 것보다 장황해질 수 있다.</li>
          <li>함수나 템플릿의 전방 선언은 헤더의 주인이 자신의 API에 다른 
          경우에는 호환되는 변경조차 하지 못하게 만들 수 있다. 예를 들어 인자 
          타입을 더 넓은 타입으로 바꾼다거나, 템플릿 인자에 디폴트 값 등을 
          추가하는 것 등이 그렇다.</li>
          <li><code>std::</code> 네임스페이스의 기호를 전방 선언하면 보통 
          예상할 수 없는 결과를 유발한다.</li>
          <li>전방 선언이 가능하도록 코드를 구조화하는 일(예를 들어 객체 멤버 
          대신 포인터 멤버를 쓰는 일)은 코드를 더 느리고 더 복잡하게 만들 수 
          있다.</li>
          <li>전방 선언으로 얻어지는 실질적인 성능 개선은 증명된 적이 없다.
          </li>
        </ul>
      </CONS>
      <DECISION>
        <ul>
          <li>헤더 파일에 선언된 함수를 사용할 때, 항상 그 헤더를 
          <code>#include</code>하라.</li>
          <li>클래스 탬플릿을 사용할 때, 헤더 파일을 <code>#include</code>
          하는 것을 선호하라.</li>
          <li>보통의 클래스를 사용할 때, 전방 선언에 의존하는 것은 좋으나, 전방
          선언이 불충분하거나 정확하지 않을 수 있는 지 조심하라; 고민되는 
          경우에는 그냥 적절한 헤더를 <code>#include</code>하라.</li>
          <li>단순히 <code>#include</code>를 피하기 위해서 데이터 멤버를 
          포인터로 대체하지 말라.</li>
        </ul>
        항상 당신이 필요한 선언/정의를 실제 제공하는 파일을 
        <code>#include</code>하라; 직접 포함되지 않은 헤더에서 과도적으로 
        가져온 기호에 의존하지 말라. 하나의 예외로 <code>myfile.cc</code> 
        파일은 그에 상응하는 <code>myfile.h</code> 헤더에 있는 
        <code>#include</code>와 전방 선언에 의존할 수 있다.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="인라인 함수">
    <SUMMARY>
      함수가 작을 때, 말하자면 10라인이나 그 이하일 정도일 때만 함수를 
      인라인으로 정의하라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        당신은 보통의 함수 호출 매커니즘으로 호출하는 대신 컴파일러가 해당 
        함수를 인라인 확장하는 것을 허용하도록 함수를 선언할 수 있다.
      </DEFINITION>
      <PROS>
        함수를 인라인하면 인라인된 함수가 작을 때 더 성능이 좋은 오브젝트 코드를 
        만들 수 있다. 접근자나 변경자 혹은 다른 작은 함수, 성능에 결정적인 
        함수들을 인라인하는데 부담을 가지지 말라.
      </PROS>
      <CONS>
        인라인을 과하게 사용하면 프로그램을 실제 더 느리게 만들 수 있다. 함수 
        크기에 따라서 인라인을 하는 건 코드 크기를 크게도 할 수 있고, 작게도 할 
        수 있다. 매우 작은 접근자 함수들을 인라인하면 보통 코드 크기를 작게 
        하지만, 반면 매우 큰 함수를 인라인하게 되면 코드 크기를 엄청나게 크게 
        만들 수 있다. 최근의 프로세서들은 인스트럭션 캐쉬를 더 잘 활용하기 
        때문에 작은 코드가 더 빨리 돈다.
      </CONS>
      <DECISION>
        <p>
          괜찮은 경험 법칙은 길이가 10라인 이상인 함수는 인라인하지 않는 것이다.
          소멸자를 주의하라! 소멸자는 함축적으로 멤버와 상위 클래스의 소멸자를 
          부르기 때문에 보이는 것보다 종종 길다.
        </p>
        <p>
          또 하나의 괜찮은 경험 법칙이 있다: 반복문이나 switch 문이 있는 함수
          (보통의 경우 절대 수행되지 않는 반복문이나 switch 문인 경우를 
          제외하고)를 인라인하는 것은 보통 효과적이지 않다.
        </p>
        <p>
          함수가 인라인으로 선언되었다고 해서 항상 인라인되는 것은 아니라는 것을
          알아두는 것이 중요하다; 예를 들면 가상 함수나 재귀 호출 함수는 보통 
          인라인되지 않는다. 일반적으로 재귀 호출 함수는 인라인되면 안 된다.
          가상 함수를 인라인하는 이유은 보통 클래스에다 정의를 넣고 싶어서 거나,
          그냥 편리해서 거나, 혹은 그 거동에 설명을 달게 하기 위한 목적이다. 
          예를 들면 접근자나 변경자가 그렇다.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="The -inl.h Files">
    <SUMMARY>
      You may use file names with a <code>-inl.h</code> suffix to define
      complex inline functions when needed.
    </SUMMARY>
    <BODY>
      <p>
        The definition of an inline function needs to be in a header
        file, so that the compiler has the definition available for
        inlining at the call sites.  However, implementation code
        properly belongs in <code>.cc</code> files, and we do not like
        to have much actual code in <code>.h</code> files unless there
        is a readability or performance advantage.
      </p>
      <p>
        If an inline function definition is short, with very little,
        if any, logic in it, you should put the code in your
        <code>.h</code> file.  For example, accessors and mutators
        should certainly be inside a class definition.  More complex
        inline functions may also be put in a <code>.h</code> file for
        the convenience of the implementer and callers, though if this
        makes the <code>.h</code> file too unwieldy you can instead
        put that code in a separate <code>-inl.h</code> file.
        This separates the implementation from the class definition,
        while still allowing the implementation to be included where
        necessary.
      </p>
      <p>
        Another use of <code>-inl.h</code> files is for definitions of
        function templates.  This can be used to keep your template
        definitions easy to read.
      </p>
      <p>
        Do not forget that a <code>-inl.h</code> file requires a
        <a href="#The__define_Guard"><code>#define</code> guard</a> just
        like any other header file.
      </p>
      
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="함수 인자 순서">
    <SUMMARY>
      함수를 정의할 때 인자 순서는 입력이 먼저고, 출력이 다음이다.
    </SUMMARY>
    <BODY>
      <p>
        C/C++ 함수의 인자는 함수 입장에서 입력이거나, 출력이거나 둘 다일 수 
        있다. 입력 인자는 보통 값(value)이거나 <code>const</code> 레퍼런스이고, 
        출력과 입출력 인자는 <code>const</code>가 아닌 포인터가 될 것이다. 함수 
        인자를 순서에 따라 배열할 때, 모든 입력 전용 인자를 출력 인자보다 앞에 
        두라. 특히 단순히 새롭다는 이유로 새 인자를 함수 마지막에 추가하지 말라;
        새로운 입력 전용 인자가 있으면 출력 인자 앞에 두라.
      </p>
      <p>
        이것은 엄격한 규칙은 아니다. 입력이면서 출력인 인자(종종 클래스와 
        구조체)는 일을 복잡하게 만든다. 그리고 언제나 그렇듯이, 연관 함수와의 
        일관성이 당신이 이 규칙을 뒤틀게 만들 수 있다.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="include의 이름과 순서">
    <SUMMARY>
      가독성을 위해서 그리고 숨겨진 종속성을 피하기 위해서 표준 순서를 사용하라:
      C 라이브러리, C++ 라이브러리, 다른 라이브러리들의 <code>.h</code>, 그리고 
      당신의 프로젝트의 <code>.h</code>.
    </SUMMARY>
    <BODY>
      <p>
        모든 프로젝트의 헤더 파일은 UNIX의 디렉터리 단축 표시인 <code>.</code> 
        (현재 디렉터리)이나 <code>..</code> (부모 디렉터리)을 사용하지 않고 
        프로젝트의 소스 디렉터리의 하위 요소로 나열되어야 한다. 예를 들면
        <code>google-awesome-project/src/base/logging.h</code>는 이와 같이 
        <code>#include</code>되어야 한다.
      </p>
      <CODE_SNIPPET>
        #include "base/logging.h"
      </CODE_SNIPPET>
      <p>
        주된 목적이 <code><var>dir2/foo2</var>.h</code>에 있는 것들을 구현하거나
        테스트하기 위한 <code><var>dir/foo</var>.cc</code>나 
        <code><var>dir/foo_test</var>.cc</code>에서 당신의 include를 아래처럼 
        순서에 따라 배열하라.
      </p>
      <ol>
        <li> <code><var>dir2/foo2</var>.h</code> (바람직한 위치 - 아래를 보라).
        </li>
        <li> C 시스템 파일들.</li>
        <li> C++ 시스템 파일들.</li>
        <li> 다른 라이브러리의 <code>.h</code> 파일들.</li>
        <li> 당신의 프로젝트의 <code>.h</code> 파일들.</li>
      </ol>
      <p>
        바람직한 순서에 따르면, <code><var>dir2/foo2</var>.h</code>가 어느 
        필요한 include들을 빠트린 경우에, <code><var>dir/foo</var>.cc</code>나 
        <code><var>dir/foo</var>_test.cc</code>의 빌드는 망가진다. 그러므로 이
        규칙은 다른 패키지의 무고한 사람들의 빌드 실패보다 이 파일에 작업하는 
        사람들의 빌드 실패를 먼저 보여주는 것을 보장한다.
      </p>
      <p>
        <code><var>dir/foo</var>.cc</code>와 
        <code><var>dir2/foo2</var>.h</code>는 종종 같은 디렉터리에 있지만, 
        다른 디렉터리에 있을 수 있다 (예를 들면 
        <code>base/basictypes_test.cc</code>와
        <code>base/basictypes.h</code>처럼).
      </p>
      <p>
        각각의 부분 안에서 include는 알파벳 순서로 나열되어야 한다. 오래된 
        코드는 이 규칙에 따르지 않을 수 있고 편리할 때 수정되어야 한다는 데 
        주목하라.
      </p>
      <p>
        예를 들자면
        <code>google-awesome-project/src/foo/internal/fooserver.cc</code>의 
        include들은 이렇게 보일 수 있다:
      </p>
      <CODE_SNIPPET>
        #include "foo/public/fooserver.h"  // Preferred location.

        #include &lt;sys/types.h&gt;
        #include &lt;unistd.h&gt;
        #include &lt;hash_map&gt;
        #include &lt;vector&gt;

        #include "base/basictypes.h"
        #include "base/commandlineflags.h"
        #include "foo/public/bar.h"
      </CODE_SNIPPET>
      <p>
        예외: 가끔 시스템에 특정한 코드들은 조건부 include를 필요로 한다. 이런
        코드들은 조건부 include를 다른 include 밑에 둘 수 있다. 당연히, 시스템에
        특정한 코드들을 작고 국한되게 유지하라. 예를 들자면:
      </p>
      <CODE_SNIPPET>
        #include "foo/public/fooserver.h"

        #include "base/port.h"  // For LANG_CXX11.

        #ifdef LANG_CXX11
        #include &lt;initializer_list&gt;
        #endif  // LANG_CXX11
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>
</CATEGORY>

<CATEGORY title="범위">
  <STYLEPOINT title="네임스페이스">
    <SUMMARY>
      <code>.cc</code> 파일의 이름 없는 네임스페이스 사용은 권장된다. 이름있는 
      네임스페이스는 프로젝트에 기반한, 아마 경로에 기반한 이름을 선택하라. 
      <SYNTAX>using 지시자</SYNTAX>를 사용하지 말라. 인라인 네임스페이스를 
      사용하지 말라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        네임스페이스는 전체 영역(전역)을 구획화되고 이름이 부여된 범위로 
        분할하는데, 이는 전체 영역(전역)에서의 이름 충돌을 막는 데 유용하다.
      </DEFINITION>
      <PROS>
        <p>
          네임스페이스는 클래스에 의해 부여된 (계층적인) 이름 축에 (마찬가지로 
          계층적인) 이름 축을 부여한다. 
        </p>
        <p>
          예를 들면 전체 영역(전역)에서 클래스 <code>Foo</code>를 가진 서로 다른
          두 프로젝트가 있다면, 이들 기호들은 컴파일 시점이나 런타임에 충돌할 수
          있다. 만약 각각의 프로젝트가 그들의 코드를 네임스페이스 안에 둔다면 
          <code>project1::Foo</code>와 <code>project2::Foo</code>는 이제 
          충돌하지 않는 서로 다른 기호이다.
        </p>
        <p>
          인라인 네임스페이스는 자동적으로 자신의 이름들을 자신을 포함하는 
          네임스페이스에 넣는다. 예로 아래 코드 조각을 보라:
        </p>
        <CODE_SNIPPET>
            namespace X {
            inline namespace Y {
              void foo();
            }
            }
        </CODE_SNIPPET>
        <p>
          <code>X::Y::foo()</code>와 <code>X::foo()</code>라는 표현은 서로 교환 
          가능하다. 인라인 네임스페이스는 원래 버전간 ABI 호환성을 위해 만들어
          졌다.
        </p>
      </PROS>
      <CONS>
        <p>
          클래스에 의해 부여된 (계층적인) 이름 축에 추가적으로 (마찬가지로 
          계층적인) 이름 축을 부여하기 때문에, 네임스페이스는 혼동을 줄 수 있다.
        </p>
        <p>
          인라인 네임스페이스는 실제로 선언한 이름들이 그 네임스페이스에 
          제한되지 않기 때문에 특히 혼동을 줄 수 있다. 인라인 네임스페이스는
          더 큰 버전 정책의 부분으로서만 유용하다.
        </p>
        <p>
          헤더 파일에서 이름 없는 네임스페이스의 사용은 C++ One Definition Rule
          (ODR)을 쉽게 침범할 수 있다.
        </p>
      </CONS>
      <DECISION>
        <p>
          네임스페이스는 아래에 설명한 정책에 따라 사용하라. 주어진 예제에서
          보이는 것처럼 네임스페이스 끝에는 주석을 붙이라.
        </p>

        <SUBSECTION title="이름 없는 네임스페이스">
          <ul>
            <li> 런타임의 이름 충돌을 피하기 위해 <code>.cc</code> 파일에서 이름
                 없는 네임스페이스는 허용되며 심지어 권장된다:
                 <CODE_SNIPPET>
                   namespace {                           // This is in a .cc file.

                   // The content of a namespace is not indented 들여쓰기 네임스페이스
                   enum { kUnused, kEOF, kError };       // Commonly used tokens.
                   bool AtEof() { return pos_ == kEOF; }  // Uses our namespace's EOF. 네임스페이스

                   }  // namespace
                 </CODE_SNIPPET>

                 <p>
                   하지만 특정 클래스와 연관이 있는 파일 영역 선언은 이름 없는
                   네임스페이스의 멤버보다는, 그 클래스 안에 타입으로서, 혹은 
                   정적 데이터 멤버나 정적 멤버 함수로서 선언될 수 있다.
                 </p>
                 </li>
            <li> <code>.h</code> 파일에서 이름 없는 네임스페이스를 사용하지 
                 말라.</li>
          </ul>
        </SUBSECTION>

        <SUBSECTION title="이름 있는 네임스페이스">
          <p>
            이름 있는 네임스페이스는 아래와 같이 사용되어야 한다:
          </p>
          <ul>
            <li> 네임스페이스는 include 구문,
                 <a href="http://google-gflags.googlecode.com/">gflags</a> 
                 정의/선언, 다른 네임스페이스에 있는 클래스 전방 선언 아래부터 
                 전체 소스 파일을 감싼다:
                 <CODE_SNIPPET>
                   // In the .h file
                   namespace mynamespace {

                   // All declarations are within the namespace scope.선언 네임스페이스
                   // Notice the lack of indentation.들여쓰기
                   class MyClass {
                    public:
                     ...
                     void Foo();
                   };

                   }  // namespace mynamespace
                 </CODE_SNIPPET>
                 <CODE_SNIPPET>
                   // In the .cc file
                   namespace mynamespace {

                   // Definition of functions is within scope of the namespace. 네임스페이스
                   void MyClass::Foo() {
                     ...
                   }

                   }  // namespace mynamespace
                 </CODE_SNIPPET>
                 <p>
                   전형적인 <code>.cc</code> 파일은 다른 네임스페이스의 클래스를
                   참조해야 할 필요가 있는 등 더 복잡한 항목들을 가질 수 있다.
                 </p>
                 <CODE_SNIPPET>
                   #include "a.h"

                   DEFINE_bool(someflag, false, "dummy flag");

                   class C;  // Forward declaration of class C in the global namespace.전방 선언 전역 네임스페이스
                   namespace a { class A; }  // Forward declaration of a::A.전방 선언

                   namespace b {

                   ...code for b...         // Code goes against the left margin.

                   }  // namespace b
                 </CODE_SNIPPET>
                 </li>

            <li> <code>std</code> 네임스페이스 안에는 어떠한 것도 선언하지 말라.
                 심지어 표준 라이브러리 클래스들의 전방 선언조차 하지 말라.
                 <code>std</code> 네임스페이스에 요소를 선언하는 것은 예를 들면
                 포팅이 불가능한, 정의되지 않은 행동이다. 표준 라이브러리의 
                 요소를 선언하려면 해당 헤더 파일을 <code>#include</code>하라.
                 </li>

            <li> 당신은 한 네임스페이스에 있는 모든 이름을 활용할 수 있게 하기
                 위해 <SYNTAX>using 지시자</SYNTAX>를 쓸 수 없다.
                 <BAD_CODE_SNIPPET>
                   // Forbidden -- This pollutes the namespace. 네임스페이스
                   using namespace foo;
                 </BAD_CODE_SNIPPET>
                 </li>

            <li> 당신은 <SYNTAX>using 선언</SYNTAX>을 <code>.cc</code> 파일의 
                 어느 곳에서나 사용할 수 있고, <code>.h</code> 파일의 함수와 
                 메서드와 클래스 안에서 사용할 수 있다.
                 <CODE_SNIPPET>
                   // OK in .cc files.
                   // Must be in a function, method or class in .h files. 메서드
                   using ::foo::bar;
                 </CODE_SNIPPET>
                 </li>

            <li> 네임스페이스 별칭은 <code>.cc</code> 파일의 모든 곳과 전체 
                 <code>.h</code> 파일을 감싸고 있는 이름 있는 네임스페이스 안의 
                 모든 곳과 허용되고, 함수나 메서드 안에서 허용된다.
                 <CODE_SNIPPET>
                   // Shorten access to some commonly used names in .cc files.
                   namespace fbz = ::foo::bar::baz;

                   // Shorten access to some commonly used names (in a .h file).
                   namespace librarian {
                   // The following alias is available to all files including 별칭
                   // this header (in namespace librarian):헤더 네임스페이스
                   // alias names should therefore be chosen consistently 별칭의 이름
                   // within a project.
                   namespace pd_s = ::pipeline_diagnostics::sidetable;

                   inline void my_inline_function() {
                     // namespace alias local to a function (or method). 메서드 네임스페이스 별칭
                     namespace fbz = ::foo::bar::baz;
                     ...
                   }
                   }  // namespace librarian
                 </CODE_SNIPPET>
                 <p>
                 <code>.h</code> 파일에 있는 별칭은 그 파일을 
                 <code>#include</code>하는 모든 사람에게 보인다는 점에 주목하라. 
                 그러므로 (프로젝트 바같에서 활용할 수 있는) 공개 헤더들과 
                 과도적으로 그 공개 헤더들에 의해 <code>#include</code>되는 
                 헤더들은 가능한 한 공개 API를 작게 유지하려는 목적의 일환으로서
                 별칭들을 정의하는 것을 피해야 한다.
                 </p>
                 </li>
            <li> 인라인 네임스페이스를 사용하지 말라.</li>
          </ul>
        </SUBSECTION>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="중첩 클래스">
    <SUMMARY>
      그들이 인터페이스의 일부인 경우에 public 중첩 클래스를 사용할 수 있다.
      그럼에도 불구하고 전체 영역(전역)에 선언이 들어가지 않도록 
      <a href="#네임스페이스">네임스페이스</a> 를 고려하라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        클래스는 다른 클래스를 그 안에 정의할 수 있다; 이는 
        <SYNTAX>멤버 클래스</SYNTAX>라고도 불린다.
        <CODE_SNIPPET>
          class Foo {

           private:
            // Bar is a member class, nested within Foo. 멤버
            class Bar {
              ...
            };

          };
        </CODE_SNIPPET>
      </DEFINITION>
      <PROS>
        중첩 클래스(혹은 멤버 클래스)는 오직 감싼 클래스에 의해서만 사용될 때
        유용하다: 클래스 이름으로 바같 영역을 더럽히는 대신 클래스를 멤버로 
        만들어 감싼 클래스 범위에 둔다. 중첩 클래스는 보통 오직 구현에만 
        연관되기 때문에 중첩 클래스의 정의를 감싼 클래스의 선언에 include하지 
        않기 위해, 중첩 클래스를 감싼 클래스 내에서 전방 선언하고, 그 다음에 
        <code>.cc</code> 파일에서 중첩 클래스를 정의할 수 있다.
      </PROS>
      <CONS>
        중첩 클래스는 오직 감싼 클래스의 정의 안에서만 전방 선언될 수 있다.
        그러므로 <code>Foo::Bar*</code> 포인터를 다루고자 하는 어떤 헤더 파일도
        <code>Foo</code> 클래스의 전체 클래스 선언을 include해야 할 것이다.
      </CONS>
      <DECISION>
        중첩 클래스가 실제 인터페이스의 일부인 경우가 아니면 중첩 클래스를 
        public으로 만들지 말라. 예를 들면 어떤 메서드의 옵션 세트를 담은 
        클래스는 실제 인터페이스의 일부인 중첩 클래스이다.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="비멤버 함수, 정적 멤버 함수, 전역 함수">
    <SUMMARY>
      네임스페이스 안에 있는 비멤버 함수나 정적 멤버 함수를 전역 함수보다 
      선호하라; 완전한 전역 함수는 좀처럼 사용하지 말라.
    </SUMMARY>
    <BODY>
      <PROS>
        비멤버 함수나 정적 멤버 함수는 어떤 경우에 유용할 수 있다. 비멤버 함수를
        네임스페이스에 두면 전체 영역 (전역) 네임스페이스을 더럽히지 않는다.
      </PROS>
      <CONS>
        비멤버 함수나 정적 멤버 함수는 새 클래스의 멤버로 정의하는 것이 더 
        합리적일 수 있다. 특히 그 함수들이 외부 리소스에 접근하는 경우나 상당한
        의존관계를 가진 경우 그렇다.
      </CONS>
      <DECISION>
        <p>
          가끔은 함수를 클래스 인스턴스에 제한되지 않게 정의하지 않는 것이 
          유용하고 심지어 필요하다. 이러한 함수들은 정적 멤버 함수거나 비멤버 
          함수일 수 있다. 비멤버 함수는 외부 변수에 의존적이어서는 안 되고, 거의
          항상 네임스페이스 안에 있어야 한다. 정적 데이터를 공유하지 않는 정적 
          멤버 함수들을 오직 분류하기 위해 새 클래스를 만들기 보다, 대신 
          <a href="#네임스페이스">네임스페이스</a>를 사용하라.
        </p>
        <p>
          생성된 클래스로서 같은 컴파일 단위에 정의된 함수들은 다른 컴파일 
          단위에서 직접 호출될 때 불필요한 커플링이나 링크 시의 종속 관계를 
          유발할 수 있다; 정적 멤버 함수가 여기에 특별히 민감하다. 이런 함수들을
          새 클래스로 뽑아 내거나, 아마 다른 라이브러리로 분리된 네임스페이스 
          안에 이런 함수들을 두는 것을 고려하라. 
        </p>
        <p>
          만약 당신이 비멤버 함수를 정의해야 하고 그가 오직 해당 
          <code>.cc</code> 파일에서만 필요하다면, 그 인식 범위를 제한하기 위해 
          이름 없는 <a href="#네임스페이스">네임스페이스</a>나 
          <code>static</code> 링크(예로 <code>static int Foo() {...}</code>)를 
          사용하라.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="지역 변수">
    <SUMMARY>
      함수의 변수는 가능한 한 좁은 범위에 두고, 선언에서 초기화하라.
    </SUMMARY>
    <BODY>
      <p>
        C++은 함수 어디 곳에서나 변수 선언을 허용한다. 우리는 당신이 변수를 
        가능한 한 국한된 범위로 선언하고 최대한 첫번째 사용처에 가깝게 
        선언하기를 권장한다. 이는 읽는 사람이 선언을 찾고 변수의 타입과 초기 
        값을 알아내는 것을 쉽게 한다. 특히 선언과 대입 대신 초기화가 사용되어야
        한다. 예를 들자면
      </p>
      <BAD_CODE_SNIPPET>
        int i;
        i = f();      // Bad -- initialization separate from declaration.선언 초기화
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
        int j = g();  // Good -- declaration has initialization.선언 초기화
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        vector&lt;int&gt; v;
        v.push_back(1);  // Prefer initializing using brace initialization. 중괄호 초기화
        v.push_back(2);
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
        vector&lt;int&gt; v = {1, 2};  // Good -- v starts initialized.
      </CODE_SNIPPET>
      <p>
        gcc가 <code>for (int i = 0; i&lt; 10; ++i)</code>를 올바르게 구현하고 
        있어서 (<code>i</code>의 범위는 오로지 <code>for</code> 반복문의 범위),
        같은 범위의 다른 <code>for</code> 반복문에서 <code>i</code>를 재사용할 
        수 있다는 점에 주목하라. 또한 <code>if</code>와 <code>while</code> 안의 
        선언의 범위도 올바르다. 예를 들면
      </p>
      <CODE_SNIPPET>
        while (const char* p = strchr(str, '/')) str = p + 1;
      </CODE_SNIPPET>
      <p>
        경고할 게 있다: 만약 변수가 객체면 그 생성자는 범위에 들어가서 생성되는 
        때마다 호출되고 그 소멸자는 범위를 빠져나갈 때마다 호출된다.
      </p>
      <BAD_CODE_SNIPPET>
        // Inefficient implementation: 구현
        for (int i = 0; i &lt; 1000000; ++i) {
          Foo f;  // My ctor and dtor get called 1000000 times each.
          f.DoSomething(i);
        }
      </BAD_CODE_SNIPPET>
      <p>
        반복문에서 사용되는 이런 변수를 선언할 때는 반복문 바같에 하는 것이 
        성능에 좋을 수 있다:
      </p>
      <CODE_SNIPPET>
        Foo f;  // My ctor and dtor get called once each.
        for (int i = 0; i &lt; 1000000; ++i) {
          f.DoSomething(i);
        }
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="정적 변수와 전역 변수">
    <SUMMARY>
      클래스 타입의 정적 변수와 전역 변수는 금지한다: 그들은 불특정한 생성과 
      소멸 순서를 때문에 찾기 힘든 버그들을 유발한다. 하지만 이들 변수가 
      <code>constexpr</code>인 경우는 허용된다: 이들은 동적으로 초기화되거나 
      소멸하지 않는다.
    </SUMMARY>
    <BODY>
      <p>
        전역 변수, 정적 변수, 정적 클래스 멤버 변수, 함수 정적 변수 등의 정적 
        저장 기간을 가진 객체들은 반드시 Plain Old Data (POD)여야 한다: 오직 
        int들, char들, float들, 포인터들, 혹은 POD의 배열이거나 구조체여야 한다.
      </p>
      <p>
        정적 변수의 클래스 생성자와 초기화 함수가 호출되는 순서는 C++에서 
        부분적으로만 특정되어 있고, 심지어 각각의 빌드마다 호출 순서가 변경될 수
        있어 찾기 힘든 버그를 만들 수 있다. 그러므로 우리는 클래스 타입의 전역 
        변수를 금지하며, 더하여 정적 POD 변수가 (<code>getenv()</code>나 
        <code>getpid()</code>처럼) 다른 전역 요소에 그 자체를 의존하는 함수가 
        아닌 함수에 의해 초기화되는 것도 허용하지 않는다.
      </p>
      <p>
        이와 비슷하게 전역 변수와 정적 변수는, <code>main()</code> 함수에서 
        리턴하거나 <code>exit()</code>이 호출되거나 여부에 무관하게, 프로그램이 
        종료될 때 소멸한다. 소멸자의 호출 순서는 생성자의 호출 순서의 반대로 
        정의된다. 생성자의 호출 순서가 불특정하기 때문에 소멸자의 호출 순서도 
        마찬가지다. 예를 들어 프로그램이 종료되는 시점에서 정적 변수는 이미 
        소멸되었을 수 있고, 하지만 여전히 수행 중인 코드가 - 아마도 다른 
        스레드에 있는 - 그것에 접근하려고 시도하고 실패한다. 혹은 어느 정적 
        <code>string</code> 변수의 소멸자가 그 문자열을 참조하는 다른 변수에 
        대한 소멸자보다 먼저 수행될 수도 있다.
      </p>
      <p>
        소멸자 문제를 다소나마 완화하는 방법은 <code>exit()</code> 대신 
        <code>quick_exit()</code>을 불러 프로그램을 종료하는 것이다. 
        차이점은 <code>quick_exit()</code>는 소멸자를 호출하지 않으며, 
        <code>atexit()</code>를 호출하여 등록된 어떤 핸들러도 호출하지 않는 
        것이다. 만약 <code>quick_exit()</code>를 사용해서 프로그램을 종료할 때
        수행해야 하는 핸들러가 있는 경우 (예를 들면 로그를 flush 한다거나), 
        당신은 <code>at_quick_exit()</code>를 사용하여 등록할 수 있다. (만약 
        <code>exit()</code>와 <code>quick_exit()</code>에 모두 수행해야 하는 
        핸들러가 있다면 당신은 두 군데 다 등록해야 한다.)
      </p>
      <p>
        결과적으로 우리는 오직 POD 데이터를 가지는 정적 변수만 허용한다. 이 
        규칙은 <code>vector</code>(대신 C 배열을 사용하라)나 
        <code>string</code>(대신 <code>const char []</code>를 사용하라)을 
        완전히 금지한다.
      </p>
      
      <p>
        만약에 클래스 타입의 정적 변수나 전역 변수가 필요하면 
        <code>main()</code> 함수나 <code>pthread_once()</code>에서 (절대로 
        해제되지 않는) 포인터를 초기화하는 방법을 고려하라. 이것은 "스마트"한 
        포인터가 아니고 날 포인터여야 하는 데 주의하라. 스마트 포인터의 소멸자는
        우리가 피하려고 하는 그 소멸자 순서 문제를 가질 것이기 때문이다. 
      </p>
    </BODY>
  </STYLEPOINT>
</CATEGORY>

<CATEGORY title="클래스">
  클래스는 C++의 코드의 기본적인 단위다. 당연히 우리는 이를 널리 쓴다. 이 섹션은
  클래스를 작성할 때 지켜야 할 것과 하지 말아야 할 것을 나열한다.

  <STYLEPOINT title="생성자에서의 작업">
    <SUMMARY>
      생성자에서 복잡한 초기화 작업을 하는 건 피하라 (특히 실패할 수 있는 
      초기화나 가상 메서드 호출이 필요한 초기화).
    </SUMMARY>
    <BODY>
      <DEFINITION>
        생성자의 바디에서 초기화를 할 수 있다.
      </DEFINITION>
      <PROS>
        타이핑하기 편리함. 클래스가 초기화 되었는지 아닌지 신경 쓸 필요가 없슴.
      </PROS>
      <CONS>
        생성자에서 작업을 할 때의 문제:
        <ul>
          <li> (<a HREF="#Exceptions">금지되어 있는</a>) exception을 제외하고
               생성자에서 오류를 알릴 수 있는 쉬운 방법이 없다.
               </li>
          <li> 만약 작업이 실패할 경우, 우리는 이제 초기화에 실패한 객체를 
               가지게 되고, 이런 객체는 특정할 수가 없는 상태일 수 있다.
               </li>
          <li> 만약 작업이 가상 함수를 호출할 경우, 이 호출은 하위 클래스 
               구현체에 전달되지 않을 것이다. 만약 당신의 클래스가 현재 상속되지 
               않더라도, 언젠가 당신의 클래스를 수정되면 많은 혼동을 주는 이런 
               문제가 조용히 생겨날 수 있다.
               </li>
          <li> 만약 누군가가 이 타입의 전역 변수를 만드는 경우 (이건 규칙 
               위반이지만 그래도 하는 경우), 생성자 코드가 
               <code>main()</code>보다 먼저 수행될 것이고, 아마도 생성자 
               코드에서 있는 암묵적인 가정을 깨뜨릴 것이다. 예를 들면
               <a href="http://google-gflags.googlecode.com/">gflags</a>들이 
               아직 초기화되지 않았을 것이다.
               </li>
        </ul>
      </CONS>
      <DECISION>
        생성자는 가상 함수를 부르거나 치명적이지 않은 실패를 알리려고 시도해서는 
        절대 안 된다. 만약 당신의 객체가 사소하지 않은 초기화를 필요로 하면, 
        팩토리 함수나 <code>Init()</code> 메서드의 사용을 고려하라.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="초기화">
    <SUMMARY>
      당신의 클래스가 멤버 변수를 정의하는 경우, 당신은 반드시 모든 멤버 변수에
      대해 클래스 내 초기화 구문을 마련하거나 생성자를 작성해야 한다 (이는 
      디폴트 생성자일 수 있다). 직접 어떠한 생성자도 선언하지 않은 경우 
      컴파일러가 일부 필드를 초기화되지 않은 채로 내버려 두거나 부적절한 값으로 
      초기화시키는 디폴트 생성자를 만들 것이다.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        디폴트 생성자는 인자 없이 클래스 객체를 <code>new</code>했을 때 불리지.
        (배열의 경우에) <code>new[]</code>를 호출할 때 항상 불리지. 클래스 내 
        멤버 초기화란 멤버 변수를 선언하면서 구성하는 것으로 예를 들면 
        <code>int count_;</code>나 <code>string name_;</code>하지 않고 
        <code>int count_ = 17;</code>나 <code>string name_{"abc"};</code>를 하는
        것이지.
      </DEFINITION>
      <PROS>
        <p>
          다른 초기화 구문이 없는 경우에 객체를 초기화하기 위해 사용자가 정의한
          디폴트 생성자가 사용되지. 이는 객체가 항상 생성과 동시에 유효하고 
          사용가능한 상태임을 보장하지; 또한 디버깅을 지원하기 위해 객체가 
          처음에는 명백하게 "불가능한" 상태로 생성되도록 보장하지.
        </p>
        <p>
          클래스 내 멤버 초기화는 여러 생성자에 초기화 코드를 중복해서 넣지 
          않고도 멤버 변수가 적절히 초기화되도록 보장하지. 이렇게 하면 새 멤버 
          변수를 추가할 때 어떤 생성자에는 초기화 코드를 넣고 다른 생성자에는 
          초기화 코드를 넣지 않아서 버그가 생기는 일이 줄어들 수 있지.
        </p>
      </PROS>
      <CONS>
        <p>
          디폴트 생성자를 명시적으로 정의하는 일은 당신같은 코드 작성자에게 
          추가적인 작업이 되지.
        </p>
        <p>
          클래스 내 멤버 초기화는 만약 멤버 변수가 선언의 부분으로 초기화된 
          다음에 다시 생성자에서 초기화되면 생성자 초기화 값이 선언에서의 초기화
          값을 재정의하기 때문에 어쩌면 혼란스러울 수도 있지.
        </p>
      </CONS>
      <DECISION>
        <p>
          간단한 초기화에는, 특히 여러 생성자에서 같은 방식으로 초기화되는 
          멤버 변수같은 경우에는 클래스 내 멤버 초기화를 사용하라구.
        </p>
        <p>
          클래스의 멤버 변수가 클래스 내에서 초기화되지 않고 다른 생성자도 없는 
          경우에는 반드시 디폴트 생성자(인자 없는 생성자)를 정의해야 한다구. 
          정의하는 생성자는 되도록이면 객체의 초기상태가 일관성 있고 유효하도록 
          객체를 초기화해야 한다구.
        </p>
        <p>
          이렇게 하는 이유는 다른 생성자도 없고, 정의된 디폴트 생성자도 없으면 
          컴파일러가 디폴트 생성자를 만들기 때문이라구. 이 컴파일러가 만든 
          생성자로는 객체를 제대로 초기화하지 못할 수 있다구. 
        </p>
        <p>
          만약 클래스가 기존 클래스를 상속하고 새로운 멤버 변수를 더하지 않은 
          경우라면 디폴트 생성자를 만들 필요는 없다구.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="explicit 생성자">
    <SUMMARY>
      인자가 하나인 생성자에는 C++ 키워드인 <code>explicit</code>을 사용하라구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        보통 생성자가 인자를 하나만 가지면, 이 생성자는 변환에 사용될 수 있지. 
        예를 들면 <code>Foo::Foo(string name)</code>을 정의하고 
        <code>Foo</code>를 받으려는 함수에다 string을 전달하면, 그 생성자가 
        호출되어 문자열을 <code>Foo</code>로 바꾸고 그 <code>Foo</code>가 함수에
        전달되게 되겠지. 이는 편리할 수 있지만, 동시에 의도하지 않는 변환이 
        일어나고 새 객체가 생성되는 골치덩어리가 될 수 있지. 생성자를 
        <code>explicit</code>으로 선언하게 되면 은연 중에 변환으로 호출되는 것을
        막을 수 있지.
      </DEFINITION>
      <PROS>
        바람직하지 않은 변환을 예방할 수 있지.
      </PROS>
      <CONS>
        없지.
      </CONS>
      <DECISION>
        <p>
          우리는 인자가 하나인 모든 생성자들이 <code>explicit</code>일 것을 
          요구한다구. 인자가 하나인 생성자 정의의 앞에 항상 
          <code>explicit</code>을 넣으라구;
          <code>explicit Foo(string name);</code>
        </p>
        <p>
          흔치 않게 우리가 허용할 때가 있는 복사 생성자의 경우에는 반드시 
          <code>explicit</code>이 아니어야 하니 예외라구. 다른 클래스에 대한 
          보이지 않는 래퍼(wrapper)로 쓸 클래스의 경우도 다른 예외지. 이런 
          예외들은 주석을 통해 명백하게 표시해야 한다구.
        </p>
        <p>
          마지막으로 초기화 리스트만을 취하는 생성자들도 explicit이 아닐 수 
          있다구. 이는 중괄호 초기화 리스트들의 대입 형태를 사용하여 타입을 
          생성하는 것을 허용하기 위함이라구(예를 들면 
          <code>MyType m = {1, 2}</code>)
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="복사 생성자">
    <SUMMARY>
      꼭 필요한 경우에만 복사 생성자와 대입 연산자를 만들라구. 그렇지 않은 
      경우에는 <code>DISALLOW_COPY_AND_ASSIGN</code>을 사용하여 갸들을 쓸 수 
      없게 만들라구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        복사 생성자와 대입 연산자는 객체의 복사본을 만들 때 쓰이지. 복사 
        생성자는 어떤 경우에는 컴파일러에 의해 암시적으로 호출되지. 예를 들면 
        객체를 값으로 (by value) 전달한 경우 그렇지.
      </DEFINITION>
      <PROS>
        복사 생성자를 사용하면 객체를 복사하는 게 쉬워지지. STL 컨테이너는 모든 
        구성요소들이 복사가능하고 할당가능할 것을 요구하지. 복사 생성자는 생성과
        복사를 결합하는데, 어떤 경우 컴파일러가 복사를 제거하기 때문에 힙 메모리
        할당을 피할 수 있어서 <code>CopyFrom()</code>-스타일의 차선책보다 더 
        성능이 좋을 수 있지.
      </PROS>
      <CONS>
        C++의 암시적 객체 복사로 인해 많은 버그와 성능 문제가 생기지. 동시에 
        어떤 객체에 대한 변경이 반영되었을 때 객체들이 레퍼런스로 전달되지 않고 
        값으로 (by value) 전달되는 지 추적하기 힘들기 때문에 가독성도 떨어지지.
      </CONS>
      <DECISION>
        <p>
          복사가능해야 하는 클래스는 거의 없다구. 대부분은 복사 생성자와 대입 
          연산자 둘 다 가지면 안 된다구. 많은 경우 복사된 값만큼 포인터나 
          레퍼런스가 잘 동작하고 성능도 좋다구. 예를 들면 함수 인자를 값으로 
          (by value) 전달하는 대신 레퍼런스나 포인터로 전달할 수 있고, STL 
          컨테이너에 객체를 저장하는 대신 포인터를 저장할 수 있다구.
        </p>
        <p>
          만약 클래스가 복사 가능해야 한다면, 복사 생성자보다 
          <code>CopyFrom()</code>이나 <code>Clone()</code>과 같은 복사 메서드를 
          만드는 게 좋다구. 이런 메서드들은 암시적으로 호출되지 않는다구. 만약 
          복사 메서드가 충분하지 않은 상황이라면 (예를 들면 성능 상의 문제로 
          클래스가 STL 컨테이너가 값으로 (by value) 저장될 필요가 있는 경우) 
          복사 생성자와 대입 연산자를 동시에 제공하라구.
        </p>
        <p>
          만약 복사생성자와 대입 연산자가 모두 필요없는 경우라면 명시적으로 쓸 
          수 없도록 만들라구. 그러기 위해서 클래스의 <code>private:</code> 
          부분에 기능없는 복사 생성자와 대입 연산자의 선언을 추가하고 그에 
          해당하는 정의를 제공하지 않을 거라구. (그러므로 이들을 사용하려고 하면
          링크 오류가 생긴다구.)
        </p>
        <p>
          편의상, <code>DISALLOW_COPY_AND_ASSIGN</code> 매크로가 사용될 수 
          있다구:
        </p>
        <CODE_SNIPPET>
          // A macro to disallow the copy constructor and operator= functions 복사 생성자 매크로 연산자
          // This should be used in the private: declarations for a class 선언
          #define DISALLOW_COPY_AND_ASSIGN(TypeName) \
            TypeName(const TypeName&amp;);               \
            void operator=(const TypeName&amp;)
        </CODE_SNIPPET>
        <p>
          그렇다면 클래스 <code>class Foo</code>에서는:
        </p>
        <CODE_SNIPPET>
          class Foo {
           public:
            Foo(int f);
            ~Foo();

           private:
            DISALLOW_COPY_AND_ASSIGN(Foo);
          };
        </CODE_SNIPPET>
        <p>
        </p>
        
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="생성자 위임과 생성자 상속">
    <SUMMARY>
      코드 중복을 줄일 수 있을 경우 생성자 위임과 상속을 사용하라구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        <p>
          생성자 위임과 생성자 상속은 생성자의 코드 중복을 줄이기 위해 두 가지 
          모두 C++11에 도입된 서로 다른 두 기능이지. 생성자 위임은 초기화 리스트
          구문의 특별한 변형을 사용해서 어느 클래스 생성자에서 그 클래스의 다른 
          생성자로 일을 넘겨줄 수 있도록 하지. 예를 들면:
        </p>
        <CODE_SNIPPET>
          X::X(const string&amp; name) : name_(name) {
            ...
          }

          X::X() : X("") { }
        </CODE_SNIPPET>
        <p>
          생성자 상속은 하위 클래스가 사용가능한 상위 클래스의 생성자를 마치 
          상위 클래스의 다른 멤버 함수처럼 재선언하지 않고 직접 가질 수 있지. 
          이는 특히 베이스 클래스가 여러 생성자를 가진 경우에 유용하지. 예를 
          들면:
        </p>
        <CODE_SNIPPET>
          class Base {
          public:
            Base();
            Base(int n);
            Base(const string&amp; s);
            ...
          };

          class Derived : public Base {
          public:
            using Base::Base;  // Base's constructors are redeclared here. 생성자
          };
        </CODE_SNIPPET>
        <p>
          이는 특히 <code>Derived</code>의 생성자가 <code>Base</code>의 생성자를
          호출하는 이외에 어떤 다른 일도 할 필요가 없기 때문에 유용하지.
        </p>
      </DEFINITION>
      <PROS>
        <p>
          생성자 위임과 생성자 상속은 장황함과 상용문구들을 줄여서 가독성을 좋게
          하지.
        </p>
        <p>
          생성자 위임은 자바 프로그래머에게 친숙하지.
        </p>
      </PROS>
      <CONS>
        <p>
          핼퍼 함수를 통해 생성자 위임의 거동을 대충 비슷하게 만들 수 있지.
        </p>
        <p>
          생성자 상속은 하위 클래스가 새 멤버 변수를 도입한 경우 상위 클래스의 
          생성자는 그들을 모르기 때문에 혼란스러울 수 있지.
        </p>
      </CONS>
      <DECISION>
        <p>
          생성자 위임과 생성자 상속은 상용문구를 줄이고 가독성을 개선할 수 있는
          경우 사용하라구. 만약 하위 클래스가 새 멤버 변수를 도입할 경우 
          생성자를 상속하는 데 주의하라구. 생성자 상속은 하위 클래스의 멤버 
          변수가 클래스 내 멤버 초기화를 사용할 경우 여전히 적절할 수 있다구.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="구조체 대 클래스">
    <SUMMARY>
      데이터를 나르는 수동적인 객체의 경우에만 <code>struct</code>를 사용하라구;
      다른 모든 경우에는 <code>class</code>를 쓰라구.
    </SUMMARY>
    <BODY>
      <p>
        C++에서 <code>struct</code> 키워드와 <code>class</code> 키워드는 거의 
        똑같이 동작하지. 우리는 이 각각의 키워드에 우리만의 의미를 부여했기에, 
        너희들이 데이터 타입을 정의할 때는 반드시 적절한 키워드를 사용해야 
        한다구.
      </p>
      <p>
        <code>structs</code>는 데이터를 나르는 수동적 객체로서 연관된 상수들을 
        가질 수 있지만, 데이터 멤버에 접근하거나 데이터 멤버를 설정하는 이외의 
        어떤 기능도 가져서는 안 된다구. 필드를 접근하거나 설정하는 것은 메서드 
        호출이 아닌 직접 필드에 접근하는 방식으로 이루어져야 한다구, 메서드는 
        오직 데이터 멤버를 설정하는 것들 이외의 기능을 제공해서는 안 된다구. 
        예를 들면 생성자, 소멸자, <code>Initialize()</code>, 
        <code>Reset()</code>, <code>Validate()</code>.
      </p>
      <p>
        만약 더 많은 기능이 필요하다면 <code>class</code>가 적당하다구. 아리송한
        경우에도 <code>class</code>로 만들라구.
      </p>
      <p>
        STL과 일관성을 지키려고 functor와 trait에 대해선 <code>class</code> 대신
        <code>struct</code>를 사용할 수 있다구.
      </p>
      <p>
        구조체와 클래스의 멤버 변수들은 
        <a HREF="#Variable_Names">서로 다른 이름 규칙</a>을 가지는 데 
        주의하라구.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="상속">
    <SUMMARY>
      컴포지션이 보통 상속보다 적절하다구. 상속을 쓰려면 
      <code>public</code>으로 만들라구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        서브 클래스가 상위 클래스로부터 상속할 때, 서브 클래스는 부모인 상위 
        클래스가 정의한 모든 데이터와 동작을 포함하게 되지. 실무적으로는 상속은 
        C++에서 주로 두가지 용도로 사용되지: 실제 코드가 자식에 의래 상속되는
        구현 상속과 오직 메서드 이름만이 상속되는 
        <A HREF="#인터페이스">인터페이스 상속</A>이 그것이지.
      </DEFINITION>
      <PROS>
        구현 상속은 상위 클래스의 코드를 현재 클래스에 특화된 것처럼 
        재사용함으로써 코드 크기를 줄이지. 상속은 컴파일-시점의 선언이기 때문에,
        너희와 컴파일러는 동작을 이해하고 오류를 찾을 수 있지. 인터페이스 상속은
        프로그램적으로 클래스가 특정 API를 노출하도록 강제할 때 사용되지. 
        마찬가지로 컴파일러는 오류를, 예를 들면 클래스가 API에 필요한 메서드를 
        정의하지 않았다거나 하는 따위의 오류를 찾을 수 있지.
      </PROS>
      <CONS>
        구현 상속의 경우에 코드가 서브 클래스와 상위 클래스에 구현 코드가 
        흩어지기 때문에, 구현을 이해하기 더 어려울 수 있지. 서브 클래스는 가상 
        함수가 아닌 함수를 재정의할 수 없으므로, 서브 클래스는 구현을 변경할 수
        없지. 상위 클래스가 일부 데이터 멤버를 정의할 수 있어서, 상위 클래스의 
        물리적 레이아웃을 특정해 버릴 수 있지.
      </CONS>
      <DECISION>
        <p>
          모든 상속은 <code>public</code>이어야 한다구. 만약 private 상속을 
          원한다면, 상속 대신 상위 클래스의 인스턴스를 멤버로 포함시키라구.
        </p>
        <p>
          구현 상속을 과용하지 말라구. 대부분 컴포지션이 더 적절하다구. 상속의 
          사용을 "동일 관계"의 경우에만 사용하도록 제한하려고 노력하라구: 
          <code>Bar</code>가 <code>Foo</code>의 "종류 중 하나"라고 합당하게 말할
          수 있을 때 <code>Bar</code>가 <code>Foo</code>의 하위 클래스가 되는 
          거라구.
        </p>
        <p>
          필요한 경우 소멸자를 <code>virtual</code>로 만들라구. 만약 클래스가 
          가상 메서드를 가지고 있다면, 소멸자는 반드시 
          <code>virtual</code>이어야 한다구.
        </p>
        <p>
          하위 클래스로부터 접근해야 할 필요가 있는 멤버 함수들에게만 
          <code>protected</code>의 사용을 제한하라구. 
          <a href="#Access_Control">데이터 멤버는 항상 private여야</a> 하는 데 
          주의하라구.
        </p>
        <p>
          만약 상속받은 가상 함수를 재정의할 때에는 명시적으로 하위 클래스의 
          선언에 <code>virtual</code>이라고 선언하라구. 이유: 만약 
          <code>virtual</code>이 없으면 읽는 사람이 이 함수가 가상 함수인지 
          아닌지를 분간하고 싶다면 이 클래스의 모든 조상을 확인해야 한다구.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="다중 상속">
    <SUMMARY>
      실제 매우 드문 경우만 다중 구현 상속이 유용하다구. 우리는 다중 상속을 상위
      클래스 중 많아야 하나만 구현을 가진 경우에만 허용한다구; 모든 다른 상위 
      클래스는 <code>Interface</code> 접미어가 달린 
      <A HREF="#인터페이스">순수한 인터페이스 클래스</A>여야 한다구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        다중 상속은 서브 클래스가 하나 이상의 상위 클래스를 가지는 것을 
        허용하지. 우리는 상위 클래스를 <em>구현</em>을 가지고 있는 것과 
        <em>순수한 인터페이스</em>인 것으로 구분하지.
      </DEFINITION>
      <PROS>
        다중 구현 상속은 단일 상속보다 더 많은 코드를 재사용하게 할 수 있지 
        (<a HREF="#상속">상속</a>을 보라구).
      </PROS>
      <CONS>
        다중 <em>구현</em> 상속이 유용한 경우는 실제 매우 드물지. 다중 구현 
        상속이 해답처럼 생각될 경우라도 보통 다른 더 명시적이고 깨끗한 방법을 
        찾을 수 있지.
      </CONS>
      <DECISION>
        다중 상속은 최대 하나의 예외를 제외하고는 모든 상위 클래스가 오직 
        <A HREF="#Interfaces">순수한 인터페이스</A>일 때만 허용된다구. 순수한 
        인터페이스로 남아 있음을 확실하게 하기 위해 상위 클래스는 
        <code>Interface</code>라는 접미어로 끝나야 한다구.
        <SUBSECTION title="주의:">
          윈도우즈의 경우에는 이 규칙의 <a HREF="#Windows_Code">예외</a>라구.
        </SUBSECTION>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="인터페이스">
    <SUMMARY>
      어떤 조건을 만족하는 클래스는 <code>Interface</code>라는 접미어로 끝날 
      수도 있다구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        <p>
        아래와 같은 조건을 만족할 때 클래스는 순수한 인터페이스지:
        </p>
        <ul>
          <li> 오직 순수 가상 ("<code>= 0</code>") 메서드와 정적 메서드만을 
               가지고 있어야 하지 (하지만 소멸자의 경우는 아래를 보라구).
               </li>
          <li> 정적 데이터 멤버가 아닌 데이터 멤버를 가질 수 없지.
               </li>
          <li> 어떤 생성자도 가지지 말아야 하지. 만약 생정자를 가지고 있다면, 
               인자가 없어야 하고 <code>protected</code>여야 해.
               </li>
          <li> 만약 하위 클래스라면 오직 이와 같은 조건을 만족하며 
               <code>Interface</code>라는 접미어로 표시된 클래스로부터
               상속받아야 하지.
               </li>
        </ul>
        <p>
          인터페이스는 그가 선언한 가상 메서드 때문에 직접 인스턴스화 될 수 
          없지. 인터페이스의 모든 구현체가 바르게 소멸되었는지 확신하기 위해서 
          인터페이스는 가상 소멸자를 정의할 수 있지 (첫번 째 규칙의 예외로 이 
          소멸자는 순수한 가상 메서드일 필요는 없지). 자세한 설명이 필요하다면 
          Stroustrup의 <cite>The C++ Programming Language</cite>, 3 판의, 12.4 
          섹션을 보라구.
        </p>
      </DEFINITION>
      <PROS>
        클래스를 <code>Interface</code>라는 접미어로 표시한 걸 보면 다른 
        사람들이 이들에 구현된 메서드를 넣거나 정적 데이터 멤버가 아닌 데이터 
        멤버를 추가하지 말아야 한다는 사실을 알게 되지. 이는 특히 
        <A HREF="#다중 상속">다중 상속</A>의 경우에 특별히 중요하지. 또한 
        인터페이스라는 개념은 자바 프로그래머에게 이미 잘 알려져 있지.
      </PROS>
      <CONS>
        <code>Interface</code> 접미어는 클래스 이름을 길게 만들어, 읽고 이해하기
        힘들게 만들 수 있지. 또한 인터페이스의 속성은 클라이언트에 노출되지 
        말아야 할 구현 상세로 간주할 수도 있지.
      </CONS>
      <DECISION>
        위의 조건을 만족하는 경우에만 클래스는 <code>Interface</code>로 끝날 수 
        있다고. 하지만 반대의 경우는 성립하지 않는다구: 위의 조건을 만족하는 
        클래스가 <code>Interface</code>로 끝나야 하는 것은 아니라구.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="연산자 오버로드">
    <SUMMARY>
      흔하지 않고 특별한 경우가 아니면 연산자를 오버로드하지 말라구. 사용자가 
      정의한 리터럴을 만들지 말라구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        클래스가 마치 내장 타입들인 것처럼 <code>+</code>나 <code>/</code>와 
        같은 연산자를 정의할 수 있지. <code>operator""</code>를 오버로드하면 
        내장 리터럴 문법을 클래스 타입의 객체를 만드는 데 사용할 수 있지.
      </DEFINITION>
      <PROS>
        <p>
          연산자를 오버로드하면 클래스가 내장 타입(<code>int</code> 따위)들과 
          같은 방식으로 동작하기에 코드가 더 직관적으로 보이게 할 수 있지. 
          오버로드된 연산자는 <code>Equals()</code>이나 <code>Add()</code>와
          같은 단조로운 이름보다는 함수 이름으로서는 더 재미있지.
        </p>
        <p>
          어떤 템플릿 함수가 바르게 동작하려면 연산자를 정의해야만 할 수 있지.
        </p>
        <p>
          사용자 정의 리터럴은 사용자 정의 타입의 객체를 생성하는 방법으로 매우 
          간결한 방법일 수 있지.
        </p>
      </PROS>
      <CONS>
        연산자 오버로드는 코드를 더 직관적으로 만드는 반면, 몇가지 단점이 있지:
        <ul>
          <li> 비싼 연산을 마치 내장 연산처럼 값이 싼 연산으로 직관적으로 반대로
               느껴지게 할 수 있지.
               </li>
          <li> 오버로드된 연산자가 호출된 장소를 찾는 것은 훨씬 어려운 일이지. 
               <code>==</code>의 호출 장소를 찾는 것보다 <code>Equals()</code>와
               같은 함수를 찾는 것이 훨씬 쉬운 일이지.
               </li>
          <li> 어떤 연산자는 포인터에서도 동작하는데, 버그를 만들기 쉽지.
               <code>Foo + 4</code>가 하는 일과 <code>&amp;Foo + 4</code>가 하는
               일은 완전히 다르지. 컴파일러는 어떤 경우에도 문제삼지 않을 
               것이기에 디버깅 하기 아주 힘들어지지.
               </li>
          <li> 사용자 정의 리터럴로 숙련된 C++ 프로그래머에게도 생소한 문법을 
               만들어 낼 수 있지.
               </li>
        </ul>
        또한 오버로드로 상상하기 힘든 파생되는 문제를 만들 수 있지. 예를 들면 
        클래스에서 단일 대상 <code>operator&amp;</code>를 오버로드하면 그 
        클래스는 안전하게 전방 선언될 수 없게 되지.
      </CONS>
      <DECISION>
        <p>
          보통은 연산자를 오버로드하지 말라구. 대입 
          연산자(<code>operator=</code>)의 경우 특별히 위험하기 때문에 반드시 
          피해야 하지. 필요한 경우 <code>Equals()</code>나 
          <code>CopyFrom()</code> 따위의 함수를 정의하라구. 마찬가지로 전방 
          선언이 될 수 있는 조금의 가능성이라도 있다면 어떤 대가를 치러서라도 
          <code>operator&amp;</code>도 피해야 한다구.
        </p>
        <p>
          <code>operator""</code>를 오버로드하지 말라구. 예를 들자면 사용자 정의
          리터럴을 정의하지 말라구.
        </p>
        <p>
          하지만 매우 드물게 템플릿이나 "표준" C++ 라이브러리와 연동하기 위해 
          연산자를 오버로드해야 하는 경우가 있지 (로깅에 사용하는 
          <code>operator&lt;&lt;(ostream&amp;, const T&amp;)</code> 따위). 만약 
          정말 그럴만 하다면 허용할 수 있지만, 최대한 그런 상황을 피하려고 
          노력하라구. 특히 STL 컨테이너에 키로 쓰이는 클래스의 경우에 
          <code>operator==</code>와 <code>operator&lt;</code>를 오버로드해서는 
          안된다구; 대신 컨테이너를 선언할 때, 항등 여부 조사 functor type과 
          비교 functor type을 만들라구.
        </p>
        <p>
          어떤 STL 알고리즘은 <code>operator==</code>을 오버로드할 것을 
          요구하기도 하는데, 그럴 경우에는 오버로드를 하되 그 이유를 설명으로 
          남기라구.
        </p>
        <p>
          <a HREF="#복사 연산자">복사 연산자</a>와 
          <a HREF="#함수 오버로드">함수 오버로드</a>를 참조하라구.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="접근 제어">
    <SUMMARY>
      데이터 멤버를 <code>private</code>으로 만들고 필요한 경우 접근자 함수를 
      통해 접근하도록 하라구 (기술적인 이유로 우리는 
      <A HREF="http://code.google.com/p/googletest/">Google Test</A>를 사용하는 
      경우 test fixture 클래스의 데이터 멤버가 <code>protected</code>인 것은 
      허용하고 있다구). 전형적으로 <code>foo_</code>라고 불리는 변수가 있다면 
      접근자 함수는 <code>foo()</code>라고 불린다구. 만약 변경자 함수도 
      필요하다면 <code>set_foo()</code>라고 할 수 있다구. 예외: 
      <code>static const</code> 데이터 멤버 (전형적으로 <code>kFoo</code>)들은 
      <code>private</code>여야 할 필요는 없다구.
    </SUMMARY>
    <BODY>
      <p>
        보통 접근자의 정의는 헤더 파일에 인라인되지.
      </p>
      <p>
        <a HREF="#상속">상속</a>과 <a HREF="#함수 이름">함수 이름</a>을 
        참조하라구.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="선언 순서">
    <SUMMARY>
      클래스 내의 선언에는 특별한 순서를 사용하라구: <code>public:</code>이 
      <code>private:</code>보다 먼저 나와야 하고 메서드가 데이터 멤버 (변수)보다
      먼저 나와야 한다거나, 기타 등등
    </SUMMARY>
    <BODY>
      <p>
        클래스 정의는 반드시 <code>public:</code> 구역으로 시작해야 한다구. 그 
        다음에 <code>protected:</code> 구역이 따라오고 그 다음이 
        <code>private:</code> 구역이라구. 만약 이 구역 중 비어 있는 게 있다면,
        그 구역을 빼 버리라구.
      </p>
      <p>
        각각의 구역 안에서 선언은 보통 다음과 같은 순서여야 한다구.
      </p>
      <ul>
        <li> typedef들과 열거형들</li>
        <li> 상수들 (<code>static const</code> 데이터 멤버)</li>
        <li> 생성자들</li>
        <li> 소멸자</li>
        <li> 메서드, 정적 메서드를 포함하여</li>
        <li> 데이터 멤버 (단 <code>static const</code> 데이터 멤버는 제외하고)</li>
      </ul>
      <p>
        Friend 선언은 항상 private 구역 안에 있어야 하고 
        <code>DISALLOW_COPY_AND_ASSIGN</code> 매크로는 <code>private:</code> 
        구역의 마지막에 있어야 한다구. 그 녀석은 클래스의 마지막에 있어야 
        한다구. <a HREF="#복사 생성자">복사 생성자</a>를 참조하라구.
      </p>
      <p>
        해당하는 <code>.cc</code> 파일의 메서드 정의는 가능한 한 선언과 같은 
        순서여야 한다구.
      </p>
      <p>
        클래스 정의에 너무 많은 메서드 정의를 인라인으로 넣지 말라구. 보통 
        사소한 정도의 양이나 성능에 중요한 부분이나 매우 짧은 메서드만이 
        인라인으로 정의된다구. <a HREF="#인라인 함수">인라인 함수</a>를 
        참조하라구.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="짧은 함수를 쓰기">
    <SUMMARY>
      짧고 집중하는 함수를 선호하라구.
    </SUMMARY>
    <BODY>
      <p>
        우리는 어떤 경우에는 긴 함수가 적절하다는 것을 알고 있기에, 함수 길이에 
        대해 강력한 제한을 두진 않는다구. 만약 함수의 길이가 40 라인을 넘어가면 
        이 함수를 프로그램의 구조를 해치지 않는 범위에서 나눌 수 있는지 
        생각하라구.
      </p>
      <p>
        만약 긴 함수가 지금은 완벽하게 동작하고 있는 경우라고 해도, 누군가 몇 
        개월 후에 고쳐서 새로운 동작을 넣을 수 있다구. 이러면 찾기 힘든 버그를 
        만들 수 있다구. 함수를 짧고 간단하게 유지하는 것은 다른 사람이 코드를 
        읽고 고치기 쉽게 해 준다구.
      </p>
      <p>
        만약 어떤 코드에서 일하다가 길고 복잡한 함수를 만날 수 있다구. 기존의 
        코드를 수정하는 데 두려움을 가지지 말라구: 만약 그런 함수와 작업하는 게 
        어렵다면, 오류를 디버그하기 힘들게 되었다고 느끼거나, 함수가 가진 여러 
        다른 맥락의 부분만을 다루기 원하게 될 것인데, 그러면 그 함수를 더 작고
        관리가능한 단위로 쪼개는 것을 고려해 보라구. 
      </p>
    </BODY>
  </STYLEPOINT>
</CATEGORY>

<CATEGORY title="구글만의 특별한 마법">
  
  <p>
    다른 곳에서는 볼 수 없는, C++ 코드를 더 튼튼하게 만들기 위해 사용하는 다양한
    기법과 장치들, 그리고 C++을 사용하는 특별한 방법이 있다구.
  </p>

  

  <STYLEPOINT title="Ownership and Smart Pointers">
    <SUMMARY>
      Prefer to have single, fixed owners for dynamically allocated objects.
      Prefer to transfer ownership with smart pointers.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        <p>
          "Ownership" is a bookkeeping technique for managing dynamically
          allocated memory (and other resources). The owner of a dynamically
          allocated object is an object or function that is responsible for
          ensuring that it is deleted when no longer needed. Ownership can
          sometimes be shared, in which case the last owner is typically
          responsible for deleting it. Even when ownership is not shared,
          it can be transferred from one piece of code to another.
        </p>
        <p>
          "Smart" pointers are classes that act like pointers, e.g. by
          overloading the <code>*</code> and <code>-&gt;</code> operators.
          Some smart pointer types can be used to automate ownership
          bookkeeping, to ensure these responsibilities are met.
          <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr">
          <code>std::unique_ptr</code></a> is a smart pointer type introduced
          in C++11, which expresses exclusive ownership of a dynamically
          allocated object; the object is deleted when the
          <code>std::unique_ptr</code> goes out of scope. It cannot be copied,
          but can be <em>moved</em> to represent ownership transfer. 
          <code>shared_ptr</code> is a smart pointer type which expresses
          shared ownership of a dynamically allocated object. 
          <code>shared_ptr</code>s can be copied; ownership of the object is
          shared among all copies, and the object is deleted when the last
          <code>shared_ptr</code> is destroyed. 
        </p>
      </DEFINITION>
      <PROS>
        <ul>
          <li>It's virtually impossible to manage dynamically allocated memory
            without some sort of ownership logic.</li>
          <li>Transferring ownership of an object can be cheaper than copying
            it (if copying it is even possible).</li>
          <li>Transferring ownership can be simpler than 'borrowing' a pointer
            or reference, because it reduces the need to coordinate the
            lifetime of the object between the two users.</li>
          <li>Smart pointers can improve readability by making ownership logic
            explicit, self-documenting, and unambiguous.</li>
          <li>Smart pointers can eliminate manual ownership bookkeeping,
            simplifying the code and ruling out large classes of errors.</li>
          <li>For const objects, shared ownership can be a simple and efficient
            alternative to deep copying.</li>
        </ul>
      </PROS>
      <CONS>
        <ul>
          <li>Ownership must be represented and transferred via pointers
            (whether smart or plain). Pointer semantics are more complicated
            than value semantics, especially in APIs: you have to worry not
            just about ownership, but also aliasing, lifetime, and mutability,
            among other issues.</li>
          <li>The performance costs of value semantics are often overestimated,
            so the performance benefits of ownership transfer might not justify
            the readability and complexity costs.</li>
          <li>APIs that transfer ownership force their clients into a single
            memory management model.</li>
          <li>Code using smart pointers is less explicit about where the
            resource releases take place.</li>
          <li><code>std::unique_ptr</code> expresses ownership transfer
            using C++11's move semantics, which are
            <a href="#Rvalue_references">generally forbidden</a> in Google
            code, and may confuse some programmers.</li>
          <li>Shared ownership can be a tempting alternative to careful
            ownership design, obfuscating the design of a system.</li>
          <li>Shared ownership requires explicit bookkeeping at run-time,
            which can be costly.</li>
          <li>In some cases (e.g. cyclic references), objects with shared
            ownership may never be deleted.</li>
          <li>Smart pointers are not perfect substitutes for plain
            pointers.</li>
        </ul>
      </CONS>
      <DECISION>
        <p>
          If dynamic allocation is necessary, prefer to keep ownership with
          the code that allocated it. If other code needs access to the object,
          consider passing it a copy, or passing a pointer or reference
          without transferring ownership. Prefer to use
          <code>std::unique_ptr</code> to make ownership transfer explicit.
          For example:
            <CODE_SNIPPET>
              std::unique_ptr&lt;Foo&gt; FooFactory();
              void FooConsumer(std::unique_ptr&lt;Foo&gt; ptr);
            </CODE_SNIPPET>
          
        </p>
        <p>
          Do not design your code to use shared ownership without a very good
          reason. One such reason is to avoid expensive copy operations,
          but you should only do this if the performance benefits are
          significant, and the underlying object is immutable (i.e.
          <code>shared_ptr&lt;const Foo&gt;</code>).  If you do use shared
          ownership, prefer to use <code>shared_ptr</code>.
          
        </p>
        <p>
          Do not use <code>scoped_ptr</code> in new code unless you need to be
          compatible with older versions of C++. Never use
          <code>linked_ptr</code> or <code>std::auto_ptr</code>. In all three
          cases, use <code>std::unique_ptr</code> instead.
        </p>
        
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="cpplint">
    <SUMMARY>
      스타일 오류를 찾기 위해 <code>cpplint.py</code>를 쓰라구.
    </SUMMARY>
    <BODY>
      <p>
        <code>cpplint.py</code>는 소스 파일을 읽고 많은 스타일 오류를 식별하는 
        도구라구. 완벽하지 않고, 오류 없는 것을 오류라고 식별하는 문제와 오류 
        있는 것을 식별하는 하지 못하는 문제를 모두 가지고 있지만, 여전히 소중한 
        도구라구. <code>// NOLINT</code>룰 파일 마지막에 넣어주면 오류 없는 것을
        오류로 식별하는 문제를 피해갈 수 있다구.
      </p>
      
      <p>
        어떤 프로젝트는 프로젝트 툴에서 <code>cpplint.py</code>를 어떻게 구동할
        지 설명을 포함하고 있지. 만약 지금 하는 프로젝트가 그헐지 않다면 별개로 
        <A HREF="http://google-styleguide.googlecode.com/svn/trunk/cpplint/cpplint.py"><code>cpplint.py</code></A>를 
        다운로드받을 수도 있다구.
      </p>
    </BODY>
  </STYLEPOINT>

  
</CATEGORY>

<CATEGORY title="그 외의 C++ 기능">
  <STYLEPOINT title="레퍼런스 인자">
    <SUMMARY>
      레퍼런스로 전달되는 모든 인자는 <code>const</code>로 표시되어야 한다구.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        C에서 함수가 변수를 변경시켜야 할 때에는 예를 들면 
        <code>int foo(int *pval)</code>처럼 인자는 포인터를 사용해야 하지. 
        C++에서는 대신 함수가 레퍼런스 인자를 선언할 수 있지: 
        <code>int foo(int &amp;val)</code>
      </DEFINITION>
      <PROS>
        인자를 레퍼런스로 정의하면 <code>(*pval)++</code>과 같은 못 생긴 코드를 
        피할 수 있지. 복사 생성자와 같은 어떤 응용에서는 필요할 수 있지. 
        포인터와 다르게 null 포인터가 들어올 수 없다는 것을 명확하게 할 수 있지.
      </PROS>
      <CONS>
        레퍼런스는 포인터의 의미를 가지지만 값(value)의 구문을 가지기 때문에 
        혼란스러울 수 있지.
      </CONS>
      <DECISION>
        <p>
          함수 인자 리스트에 안의 모든 레퍼런스는 <code>const</code>여야 한다구:
        </p>
        <CODE_SNIPPET>
          void Foo(const string &amp;in, string *out);
        </CODE_SNIPPET>
        <p>
          사실 구글 코드에서는 입력 인자는 값이거나 <code>const</code> 
          레퍼런스여야 하고 출력 인자는 포인터여야 한다는 강력한 컨벤션이 있지.
          입력 인자는 <code>const</code> 포인터일 수 있지만, 
          <code>swap()</code>처럼 컨벤션에 따라 요구되는 경우를 제외하고는
          <code>const</code>가 아닌 레퍼런스 인자는 절대 안된다구.
        </p>
        <p>

         하지만 어떤 경우에는 입력 인자에서 <code>const T*</code>가 
         <code>const T&amp;</code>보다 나은 경우가 있는데, 예를 들면:
         <ul>
           <li>null 포인터를 전달하고 싶을 때</li>
           <li>함수가 입력에 대한 포인터나 레퍼런스를 저장하고자 할 때</li>
         </ul>
         

         대부분의 경우에는 입력 인자가 <code>const T&amp;</code>로 지정된다는 
         점을 기억하라구. 대신 <code>const T*</code>를 사용하는 것은 읽는 
         사람에게 입력이 좀 다르게 다루어질 것이라고 알려주는 것이라구. 그러니 
         만약 <code>const T&amp;</code> 대신 <code>const T*</code>를 쓴다면 
         분명한 이유가 있어야 한다구; 그렇지 않은 경우에는 읽는 사람이 
         <code>const T*</code>를 쓴 이유에 대해 있지도 않은 설명을 찾느라 혼란에
         빠지게 될 수 있다구.

        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Rvalue references">
    <SUMMARY>
      Do not use rvalue references, <code>std::forward</code>,
      <code>std::move_iterator</code>, or <code>std::move_if_noexcept</code>.
      Use the single-argument form of <code>std::move</code> only with
      non-copyable arguments.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        Rvalue references are a type of reference that can only bind to temporary
        objects. The syntax is similar to traditional reference syntax.
        For example, <code>void f(string&amp;&amp; s);</code> declares a
        function whose argument is an rvalue reference to a string.
      </DEFINITION>
      <PROS>
        <ul>
          <li>Defining a move constructor (a constructor taking an rvalue
            reference to the class type) makes it possible to move a value instead
            of copying it. If <code>v1</code> is a <code>vector&lt;string&gt;</code>,
            for example, then <code>auto v2(std::move(v1))</code> will probably
            just result in some simple pointer manipulation instead of copying a
            large amount of data. In some cases this can result in a major
            performance improvement.
          </li>
          <li>
            Rvalue references make it possible to write a generic function
            wrapper that forwards its arguments to another function, and works
            whether or not its arguments are temporary objects.
          </li>
          <li>
            Rvalue references make it possible to implement types that are
            moveable but not copyable, which can be useful for types that have
            no sensible definition of copying but where you might still want to
            pass them as function arguments, put them in containers, etc.
          </li>
          <li>
            <code>std::move</code> is necessary to make effective use of some
            standard-library types, such as <code>std::unique_ptr</code>.
          </li>
        </ul>
      </PROS>
      <CONS>
        <ul>
          <li>Rvalue references are a relatively new feature (introduced as part
            of C++11), and not yet widely understood. Rules like reference
            collapsing, and automatic synthesis of move constructors, are
            complicated.
          </li>
          <li>Rvalue references encourage a programming style that makes heavier
            use of value semantics. This style is
            unfamiliar to many developers, and its performance characteristics
            can be hard to reason about.
          </li>
        </ul>
      </CONS>
      <DECISION>
        <p>
          Do not use rvalue references, and do not use the
          <code>std::forward</code> or <code>std::move_if_noexcept</code>
          utility functions (which are essentially just casts to rvalue
          reference types), or <code>std::move_iterator</code>. Use
          single-argument <code>std::move</code> only with objects that are
          not copyable (e.g. <code>std::unique_ptr</code>), or in templated
          code with objects that might not be copyable. 
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="함수 오버로드">
    <SUMMARY>
      읽는 사람이 호출한 부분을 봤을 때 굳이 어느 오버로드 함수가 정확히 
      호출되었는지 찾아보지 않고도 무슨 일이 벌어졌는 지 더 쉽게 파악할 수 있는 
      경우에만 (생성자를 포함하여) 오버로드된 함수를 쓰라구. 
    </SUMMARY>
    <BODY>
      <DEFINITION>
        <p>
          <code>const string&amp;</code>를 취하는 함수를 쓰고 그것을 
          <code>const char*</code>를 취하는 다른 함수로 오버로드할 수 있지.
        </p>
        <CODE_SNIPPET>
          class MyClass {
           public:
            void Analyze(const string &amp;text);
            void Analyze(const char *text, size_t textlen);
          };
        </CODE_SNIPPET>
      </DEFINITION>
      <PROS>
        오버로드하면 동일한 이름을 가진 함수가 다른 인자들을 취하도록 허용해서 
        코드를 더 직관적으로 만들 수 있지. 템플릿화된 코드에서 필요할 수도 있고,
        비지터에서 편리할 수 있지.
      </PROS>
      <CONS>
        만약 함수가 인자 타입으로만 오버로드되면 읽는 사람은 어떤 일이 벌어지는 
        지 알기 위해, C++의 복잡한 매치 규칙을 이해해야만 할 수 있지. 또한 하위 
        클래스가 함수의 변형 중 일부만 재정의하는 경우 상속 문법 때문에 많은 
        사람들이 혼란에 빠지게 될 수 있지.
      </CONS>
      <DECISION>
        만약 함수를 오버로드하기를 원한다면, 인자의 타입에 대한 정보를 이름에 
        넣어 한정하는 것을 고려해 보라구. 예를 들면 <code>Append()</code>보다는 
        <code>AppendString()</code>이나 <code>AppendInt()</code>를 쓰라구.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="디폴트 인자">
    <SUMMARY>
      아래에 설명된 상황을 제외하고는 디폴트 함수 인자는 허용하지 않는다.
      그대신 적절하다면 함수 오버로딩을 고려해라.
    </SUMMARY>
    <BODY>
      <PROS>
        자주 디폴트 값을 가지고, 가끔 디폴트 값을 덮어쓰는 함수가 있다.
        디폴트 인자는 이런 예외적인 상황에서 많은 함수들을 정의하지 않고
        이런 것을 할 수 있는 쉬운 방법이다. 함수 오버로딩과 비교해서
        디폴트 인자는 더 명확한 문법을 가지며, 적은 반복 코드와
        '필요'한지 '선택적'인지를 더 명확하게 구별하게 해준다.
      </PROS>
      <CONS>
        디폴트 인자에서는 함수 포인터 사용은 혼란스럽다. 자주 함수 시그너처가
        호출 시그너처와 맞지 않기 때문이다. 이미 존재하는 함수에
        디폴트 인자를 추가하는 것은 함수의 타입을 변경하며,
        해당 함수의 주소를 받는 코드에 문제를 만들 수 있다. 함수 오버로드를
        추가하여 이런 문제들을 피할 수 있다. 게다가, 디폴트 인자는
        오버로드된 함수와는 다르게 "기본값" 이 함수 선언 부분에만
        나타나서, 호출하는 지점마다 복사되기 때문에
        비대한 코드를 만들어낼 수 있다.
      </CONS>
      <DECISION>
        <p>
          위의 단점이 그렇게 부담이 되는건 아니지만, 여전히 함수 오버로딩에
          비한 디폴트 인자의 (작은)장점보다 단점이 크다. 그래서
          아래에 기술된 것을 제외하고는 모든 인자는 명시적으로 지정되어야
          한다.
        </p>
        <p>
          다른 명시적인 예외는 .cc 파일에서의 정적 함수(혹은
          이름 없는 네임스페이스 안의 함수)이다. 이런 경우,
          함수의 사용이 지역적이기 때문에 단점이 적용되지 않는다.
        </p>
        <p>
          또다른 명시적인 예외는 디폴트 인자가 가변길이 인자 목록 리스트로
          쓰여질 때이다.
        </p>
        <CODE_SNIPPET>
          // Support up to 4 params by using a default empty AlphaNum.
          string StrCat(const AlphaNum &amp;a,
                        const AlphaNum &amp;b = gEmptyAlphaNum,
                        const AlphaNum &amp;c = gEmptyAlphaNum,
                        const AlphaNum &amp;d = gEmptyAlphaNum);
        </CODE_SNIPPET>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="가변길이 배열과 alloca()">
    <SUMMARY>
      가변길이 배열이나 <code>alloca()</code>를 허용하지 않는다.
    </SUMMARY>
    <BODY>
      <PROS>
        가변길이 배열은 자연스러운 문법이다. 가변길이 배열과
         <code>alloca()</code> 는 매우 효율적이다.
      </PROS>
      <CONS>
        가변길이 배열과 alloca 는 C++ 표준이 아니다.
        더욱 중요한 것은, 데이터 의존적인 스택 공간의 양을 할당하여,
        찾기 어려운 메모리 덮어쓰기(overwriting) 버그를 만들 수 있다는
        것이다: "나의 머신에서는 잘 작동하였는데, 릴리즈되면 이상하게도
        죽어버린다"
      </CONS>
      
      <DECISION>
        <code>scoped_ptr</code>/<code>scoped_array</code> 같은 안전한
         할당자를 사용하여라.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Friends">
    <SUMMARY>
      <code>friend</code> 클래스와 함수들을 적절하게 사용한다.
    </SUMMARY>
    <BODY>
      <p>
        Friend 는 코드를 읽는이가 클래스의 private 멤버의 사용을
        다른 파일에서 확인할 필요가 없도록 하기 위해서 일반적으로
        같은 파일에서 선언된다. <code>friend</code>의 일반적인
        사용은 <code>Foo</code> 클래스의 내부 상태를 외부에 노출시키지 않고
        제대로 구성하기 위해 <code>FooBuilder</code> 클래스가 <code>Foo</code>
        클래스의 friend 가 되는 것이다. 몇몇 경우에는 유닛테스트 클래스를
        만들기에 유용하다.
      </p>
      <p>
        Friend는 클래스의 캡슐화 영역(boundary)을 확장한다. 하지만 깨트리지는 않는다.
        몇몇 경우에는 단지 하나의 다른 클래스가 접근하기 위해서 public 멤버를
        만드는 것보다는 낫다. 그러나 대부분의 클래스들은 오로지 public 멤버들을
        통해서 다른 클래스들과 상호작용하여야 한다.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="예외">
    <SUMMARY>
      C++ 예외를 사용하지 않는다.
    </SUMMARY>
    <BODY>
      <PROS>
        <ul>
          <li>**예외는 고레벨의 어플리케이션이 깊게 중첩된 함수에서
            불분명함과 에러에 취약한 에러 코드들의 기록없이 "일어날 수 없는" 실패를 어떻게 처리할 것인지 결정한다.</li>

          <li>예외는 대부분의 다른 현대 언어들에서 사용된다.
            C++ 에서 예외를 사용하는 것은 파이썬, 자바 그리고 다른이들이
            친숙한 C++ 과 보다 일관적으로 만든다.</li>

          <li>몇몇 서드파티 C++ 라이브러리들은 예외를 사용하고,
            내부적으로 예외를 사용하지 않는 것은 이런 라이브러리들과의
            통합을 어렵게 만든다.</li>

          <li>예외는 생성자가 실패처리를 할 수 있는 유일한
            방법이다. 이것을 팩토리 함수나 <code>Init()</code>
            메서드로 흉내낼 수 있지만, 이런 방법들은 힙 할당이나
            새로운 "유효하지 않은" 상태를 각각 만들어낸다.</li>

          <li>예외는 테스트하는 프레임워크에서는 정말 편리하다.</li>
        </ul>
      </PROS>
      <CONS>
        <ul>
          <li>기존의 함수에 <code>throw</code> 문을 추가할 때,
          반드시 함수의 모든 이행적(transitive) 호출자들을
          확인해야 한다. 최소한 기본적인 예외 안전을 보장하거나,
          예외를 아예 catch 하지 않아서 프로그램이 잘 종료되도록
          해야 한다. 예를 들어, <code>f()</code> 가 <code>g()</code> 를
          <code>g()</code> 가 <code>h()</code> 를 호출하고, <code>h</code> 가 예외를 던지고, <code>f</code> 가 catch 할 때, <code>g</code> 
          는 조심히 작성되어야 하며 그렇지 않으면 제대로 리소스가
          정리되지 못할 수 있다.</li>

          <li>더 일반적으로, 예외는 프로그램의 흐름을 코드를 볼 때
            평가하기 어렵게 만든다. 함수들이 어디서 제대로
            리턴할지 기대하기 어렵게 만든다. 이것은 유지보수와
            디버깅을 어렵게 만든다. 이 비용을 어디서 어떻게
            예외를 사용할지 규칙을 정해서 줄일 수 있지만
            개발자가 알고 이해해야한다.</li>

          <li>예외 안정성은 RAII 와 다른 코딩 관습들도 요구된다.
              **정확한 예외에 안전한 코드를 작성하는 것을 쉽게
              만들기 위해서는 많은 장치를 지원하는 것이 요구된다.
              **더 나아가서, 코드를 읽는이가 전체 호출 흐름을 이해해야만 하는 것을
              피하기 위해서는, 예외에 안전한 코드는 지속적인 상태를
              "commit" 단계로 만드는 로직과 반드시 분리되어야 한다.
              This will have both benefits and costs (perhaps where
              you're forced to obfuscate
          code to isolate the commit). 예외를 허용하는 것은 그만한 가치가
              없을지라도 이런 비용들을 지불해야할 것이다.</li>

          <li>예외를 사용하는 것은 만들어진 각 바이너리(binary)에 데이터를 추가하고
              컴파일 시간(아마도 작겠지만)과 주소 공간의 부담을 증가시킨다.</li>

          <li>예외의 유용성은 개발자에게 적절하지 않거나 복구될 수 있을 때에게도
              예외를 던지는 것이 안전하지 않을 때에도 예외를 던지도록 권장하게 된다.The availability of exceptions may encourage developers
          to throw them when they are not appropriate or recover from
          them when it's not safe to do so. 예를 들어, 유효하지 않은 사용자
          입력은 예외를 발생시키지 않아야 한다. 이런 제약조건들을
          문서화 하는 것들이 필요해진다!</li>
        </ul>
      </CONS>
      <DECISION>
        <p>
          그런 측면에서, 특히 새로운 프로젝트에서 예외를 사용하는 것의 이득이
           비용보다 많다. 그러나, 기존의 코드에서 예외를 사용하기 시작하는 것은
           모든 의존적인 코드에 영향을 미친다. 만약 예외가 새로운 프로젝트를
           넘어서 전파될 수 있다면, 새로운 프로젝트를 기존의 예외를 사용하지 않는
           코드에 통합시키는 것은 문제가 된다. 구글에서의 대부분의 기존 C++ 코드는
           예외를 다룰 준비가 안되어 있기 때문에, 예외를 만드는 새로운 코드를
           적용하는 것은 상대적으로 어렵다.
        </p>
        <p>
          예외에 내성이 없는 구글의 기존의 코드가 있을 때, 예외를 사용하는 비용은
          새로운 프로젝트에서의 비용보다 다소 크다. 전환 작업은 느리고
          에러에 취약할 것이다. We don't believe that the available alternatives to
          exceptions, such as error codes and assertions, introduce a
          significant burden.
          
        </p>
        <p>
          **예외의 사용에 대한 우리의 충고는 철학적이거나 윤리적인 배경에서가 아니라
          실질적인 단정이다. 우리는 구글의 오픈소스 프로젝트들을 사용기를 원하고,
          이런 프로젝트들이 예외를 사용한다면, 그렇게 하는 것이 어렵기 때문에,
          구글의 오픈소스 프로젝트들 또한 예외를 사용하지 않기를 권한다.
          처음부터 예외를 전체적으로 사용하기로 했었다면 아마 다른 상황일 것이다.
        </p>
        <p>
          이 제한은 또한 <code>noexcept</code>, <code>std::exception_ptr</code>,
          <code>std::nested_exception</code> 처럼 C++11 에서 추가된 예외에 관련된
          기능들에도 적용된다.
        </p>
        <p>
          이 규칙에는 윈도우즈 코드의 <a HREF="#Windows_Code">예외사항</a>이 있다.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Run-Time Type Information (RTTI)">
    <SUMMARY>
      Run Time Type Information (RTTI) 를 사용하지 않는다.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        RTTI 는 프로그래머가 객체의 C++ 클래스를 질의하는 것을 허용하게 해준다.
        이것은 <code>typeid</code> 나 <code>dynamic_cast</code> 를 통해서
        이루어진다.
      </DEFINITION>
      <CONS>
        <p>
         실행시간(run-time)에 자주 객체의 타입을 질의하는 것은 설계에 문제가 있음을
         의미한다. 실행시간에 객체의 타입을 알아야하는 것은 자주 클래스 계층의
         설계에 결함이 있다는 것의 징후이다.
        </p>
        <p>
         RTTI 의 무분별한 사용은 코드를 유지보수하기 어렵게 만든다. 그리고 타입 기반의
         의사 결정 트리나 코드에 흩어져있는 swtich 문들을 만든다. 이런 모든것들은
         나중에 코드를 변경할 때 반드시 검사되어야 한다.
        </p>
      </CONS>
      <PROS>
        <p>
          (아래에 기술된) RTTI 의 표준 대체제는 문제가 되는 클래스 계층의
          변경이나 재설계를 필요로 한다. 가끔 이런 변경은 특히 널리 사용되거나
          성숙한 코드에서 불가능하거나 바람직하지 못하다. 
        </p>
        <p>
          RTTI 는 몇몇 유닛테스트들에서 유용하다. 예를 들어, 팩토리 클래스에서 새롭게
          만들어진 객체가 기대한 동적 타입을 가지는지 검증하는 테스트에서 유용하다.
          또한 객체들과 그들의 모형(mock)간의 관계를 관리하는데 유용하다.
        </p>
        <p>
          RTTI 는 여러개의 추상 객체들을 고려할 때 유용하다. 아래의 코드를 검토해라.
          
          <CODE_SNIPPET>
            bool Base::Equal(Base* other) = 0;
            bool Derived::Equal(Base* other) {
              Derived* that = dynamic_cast&lt;Derived*&gt;(other);
              if (that == NULL)
                return false;
              ...
            }
          </CODE_SNIPPET>
        </p>

      </PROS>
      <DECISION>
        <p>
          RTTI 는 적법한 사용을 가지지만 남용될 수 있고, 그래서 사용할 때
          반드시 주의해야한다. 유닛테스트에서는 자유롭게 사용해도 되지만,
          다른 코드에서는 가능하면 피해라. 특히, 새로운 코드에서
          RTTI 를 사용할 때는 다시 한번 생각해봐라. 만약 객체의 클래스에
          기반하여 다르게 행동하는 코드를 작성할 필요가 있다면,
          타입을 질의하는 아래의 대체제들 중 하나를 고려해라.
        <ul>
          <li>
            가상 메서드는 하위 클래스에 따라 다른 코드 경로를 실행하는
            선호되는 방법이다. 이것은 작업을 객체 스스로가 처리하게 한다.
          </li>
          <li>
            **만약 작업이 객체의 바깥에 있고 If the work belongs outside the object and instead in some
            processing code, 비지터 설계 패턴 같은 이중 디스패치를 고려해라.
            이것은 객체 자신의 바깥에서 내장 타입 시스템을 이용하여 클래스의
            타입을 결정할 수 있게 허용한다.
          </li>
        </ul>
        </p>
        <p>
          프로그램의 로직이 주어진 상위 클래스의 인스턴스가 특정 하위 클래스의
          인스턴스라는 것을 보장한다면, <code>dynamic_cast</code> 는 그 객체에 대해
          자유롭게 사용될 수 있다.
          일반적으로 그런 상황에서 <code>static_cast</code> 을 대체제로 사용할 수 있다.
        </p>
        <p>
          타입을 기반으로 한 결정 트리는 코드가 잘못된 궤도에 있다는 징후이다.
          
          <BAD_CODE_SNIPPET>
            if (typeid(*data) == typeid(D1)) {
              ...
            } else if (typeid(*data) == typeid(D2)) {
              ...
            } else if (typeid(*data) == typeid(D3)) {
            ...
          </BAD_CODE_SNIPPET>
          위와 같은 코드는 추가적인 하위 클래스들이 클래스 계층에 추가될 때
          일반적으로 문제가 된다. 게다가, 하위 클래스의 속성이 변경될 때, 찾기가 어렵고,
          영향을 받는 모든 코드 부분들을 수정하기가 어렵다.
        </p>
        <p>
          직접 구현한 RTTI 비슷한 회피 방법을 만들지 말아라. RTTI 에 대한 논의는
          타입 태그를 이용한 클래스 계층같은 회피 방법들에도 반드시 적용된다.
          **게다가, 회비 방법들은 진정한 의도를 위장한다.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="캐스팅">
    <SUMMARY>
      <code>static_cast&lt;&gt;()</code> 같은 C++ 캐스트를 사용해라.
      <code>int y = (int)x;</code> 나 <code>int y = int(x);</code> 같은
      다른 캐스트 형식을 사용하지 마라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        C++ 은 캐스트 연산의 타입을 구별하는, C 와는 다른 캐스트
        시스템을 도입하였다.
      </DEFINITION>
      <PROS>
        C 캐스트의 문제점은 연산이 모호하다는 것이다. 
        가끔은 (<code>(int)3.5</code>와 같은) <em>conversion</em> 을 하고
        가끔은 (<code>(int)"hello"</code>와 같은) <em>cast</em> 을 한다.
        C++ 캐스트는 이것을 방지한다. 게다가 C++ 캐스트는 검색하기도
        좋다.
      </PROS>
      <CONS>
        문법이 좋지 않다.
      </CONS>
      <DECISION>
        <p>
          C-스타일의 캐스트를 사용하지 마라. 대신에 C++-스타일의 캐스트를 사용해라.
        </p>
        <ul>
          
          <li> C-스타일 캐스트가 하는 값 변환의 같은 형태나 명시적으로 클래스의 포인터를
               클래스로 업-캐스트(up-cast)를 할 때, <code>static_cast</code> 를 사용해라.
               </li>
          <li> <code>const</code> 한정자를 제거하기 위해서 <code>const_cast</code> 를 사용해라.
               (<a HREF="#Use_of_const">const</a> 참조)
               </li>
          
          <li> 포인터 타입을 정수로 혹은 그 반대로의 안전하지 않은 변환을 할 때는
               <code>reinterpret_cast</code> 를 써라. **지금하는 것이 무엇인지 알고,
               aliasing 문제를 이해할 때 이것을 써라.
               </li>
        </ul>
        <p> <code>dynamic_cast</code> 의 사용의 지침을 위해서 
            <a href="#Run-Time_Type_Information__RTTI_">RTTI</a> 를 참조해라.
            </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="스트림">
    <SUMMARY>
      로그를 위해서만 스트림을 써라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        스트림은 <code>printf()</code> 과 <code>scanf()</code> 의 대체이다.
      </DEFINITION>
      <PROS>
        스트림을 사용하면, 출력하려는 객체의 타입을 알 필요가 없다.
        인자 리스트와 포맷 문자열이 일치하지 않는 문제가 없다.
        (gcc 를 사용해도, <code>printf</code> 의 문제는 없다)
        스트림은 연관된 파일들에 열기/닫기를 하는 자동적인
        생성자와 소멸자를 가진다.
      </PROS>
      <CONS>
        스트림은 <code>pread()</code> 같은 기능적인 동작을 만들기를 어렵게 한다.
        **(특히 일반적인 문자열 관용 포맷 <code>%.*s</code>같은) 어떤 포맷팅은 <code>printf</code>같은 기법없이 스트림을 효과적으로 사용하는 것이 불가능하다면 어렵다.
        스트림은 국제화에 유용한 (<code>%1s</code> 지시자 같은) 연산자 재정렬을 지원하지 않는다.
      </CONS>
      <DECISION>
        
        <p>
          로그를 위한 인터페이스에 필요할 때가 아니면, 스트림을 쓰지 마라.
          대신 <code>printf</code>같은 것들을 써라.
        </p>
        <p>
          스트림을 사용하는데 다양한 장단점들이 있지만, 이 경우 다른 많은
          경우들과 같이 논의보다 일관성이 중요하다. 코드에서 스트림을 쓰지 마라.
        </p>

        <SUBSECTION title="추가 논의">
          <p>
            이 문제에 대해서 논쟁이 되어왔다. 그래서 좀 더 깊게 이유를
            설명한다. "단 하나의 방법 가이드 원칙"을 재고하자. 특정 형태의 I/O 를 할 때,
            모든 곳에서 같은 형태의 코드를 보길 원한다. 이것 때문에, 
            사용자가 스트림과 <code>printf</code>, Read/Write/기타 사이에서
            결정하는 것을 허용하길 원하지 않는다. 대신에, 하나 혹은 다른 것을
            결정해야 한다. 로그는 꽤 특별한 적용이고, 역사적인 이유이기 때문에
            로그는 예외로 만들었다.
          </p>
          <p>
            스트림의 제안자는 스트림들이 둘중 명벽한 선택이라고 주장해왔지만,
            이 문제는 꽤 명백하지 않다. 그들이 가르키는 스트림의 모든 장점들은
            동등한 단점을 가지고 있다. 가장큰 장점은 출력할 객체의 타입을 몰라도
            되는 것이다. 이것은 타당하다. 하지만, 단점이 있다. 쉽게
            잘못된 타입을 사용할 수 있고, 컴파일러가 경고를 하지 않을 것이다.
            스트림을 사용할 때 지식없이 이런 종류의 실수를 만들기 쉽다.
          </p>
          <CODE_SNIPPET>
            cout &lt;&lt; this;  // 주소를 출력해라
            cout &lt;&lt; *this;  // 내용을 출력해라
          </CODE_SNIPPET>
          <p>
            <code>&lt;&lt;</code> 가 오버로드되었기 때문에, 컴파일러는
            오류를 내지 않는다. 정확히 이런 이유로 오버로드를 권하지
            않는다.
          </p>
          <p>
            누군가는 <code>printf</code> 포맷팅이 못생기고 읽기 어렵다고 하지만,
            스트림도 더 나을 것이 없다. 아래 코드를 보자. 둘다 오타가 있다.
            어느 것이 더 발변하기 쉬운가?
          </p>
          <CODE_SNIPPET>
             cerr &lt;&lt; "Error connecting to '" &lt;&lt; foo-&gt;bar()-&gt;hostname.first
                  &lt;&lt; ":" &lt;&lt; foo-&gt;bar()-&gt;hostname.second &lt;&lt; ": " &lt;&lt; strerror(errno);

             fprintf(stderr, "Error connecting to '%s:%u: %s",
                     foo-&gt;bar()-&gt;hostname.first, foo-&gt;bar()-&gt;hostname.second,
                     strerror(errno));
          </CODE_SNIPPET>
          <p>
            **계속 문제를 내놓는다.
            ("적절한 래퍼(wrapper)로 더 나아지지 않을까"라고 논의할 수 있지만,
            하나의 형태(scheme)에만 가능하다면, 또 다른 것에는 여전히
            가능하지 않은 것이 아닌가? 또한, 목표는 다른 사람이 배워야할 장치들을
            추가하는 것이 아니라 언어를 더 작게 만드는 것임을 기억해라.)
          </p>
          <p>
             어떤 것도 각각 다른 장단점을 가지고 있고, 명백히 더 나은 해결법이 없다.
             간단함의 원칙은 이들 중 하나를 결정해야 한다. 그리고 주요 결정은
             <code>printf</code> + <code>read</code>/<code>write</code> 이다.
          </p>
        </SUBSECTION>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="전위 증가와 전위 감소">
    <SUMMARY>
      이터레이터와 다른 템플릿 객체들에 증가와 감소 연산자에 접두어 형태
       (<code>++i</code>) 를 사용해라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        하나의 변수가 증가되고 (<code>++i</code> 나 <code>i++</code>) 혹은
        감소되고 (<code>--i</code> 나 <code>i--</code>) 나서
        표현식의 값이 사용되지 않을 때, 전위 증가 (감소) 혹은 후위 증가 (감소)
        가 반드시 결정되어야 한다.
        When a variable is incremented (<code>++i</code> or
        <code>i++</code>) or decremented (<code>--i</code> or
        <code>i--</code>) and the value of the expression is not used,
        one must decide whether to preincrement (decrement) or
        postincrement (decrement).
      </DEFINITION>
      <PROS>
        리턴값이 무시될 때, "접두 형태" (<code>++i</code>) 는 절대 "접미 형태"
        (<code>i++</code>) 에 비해 비효율적이지 않다. 이것은
        후위 증가 (혹은 감소) 가 만들어질 <code>i</code> 의 복사본을
        요구하기 때문이다. 만약 <code>i</code> 가 이터레이터이거나
        다른 비-스칼라(non-scalar) 타입이라면, <code>i</code> 의
        복사는 비용이 비싸질 수 있다. 값이 무시되면, 2개의 증가 타입이
        같은 행동을 하기 때문에, 그냥 항상 전위-증가를 사용하는게 어떨까
      </PROS>
      <CONS>
        특히 <code>for</code> 에서처럼, 표현값이 쓰이지 않을 때 C 에서의
        전통적인 개발에서 후위 증가를 사용했다.
        누군가 영어의 경우 "주어"(<code>i</code>)가 "동사"(<code>++</code>)보다
        먼저 나오기 때문에 후위 증가가 읽기 편하다는 것을 발견했다.
      </CONS>
      <DECISION>
        간단한 스칼라 (비-객체) 값들에서는 하나의 형식을 선호할 이유가
        없다. 이터레이터나 다른 템플릿 타입들에서는 전위 증가를 사용해라.
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="const의 사용">
    <SUMMARY>
      이치에 맞는 곳마다 <code>const</code> 를 사용해라.
      C++11 에서는 const 의 어떤 사용에서는 <code>constexpr</code> 가
      더 나은 선택이다.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        선언된 변수와 인자들 앞에는 변수들이 변하지 않을 것임을 
        알리기 위해 <code>const</code> 가 올 수 있다(예, <code>const int foo</code>).
        클래스 함수들은 함수가 클래스 멤버 변수들의 상태를 변경하지
        않음을 알리기 위해 <code>const</code> 제한자를 가질 수 있다
        (예, <code>class Foo { int Bar(char c) const;
        };</code>).
      </DEFINITION>
      <PROS>
        사람들이 어떻게 변수들이 쓰일지 이해하기 쉽다.
        컴파일러가 타입 체크를 더 잘하게 해주고, 생각건대 더 나은 코드를
        생성하게 해준다. 호출한 함수가 변수들을 어떻게 변경할지가 제한되어
        있다는 것을 알기 때문에 사람들이 프로그램의 정확함을
        이해하는 데 도움을 준다. 멀티쓰레드 프로그램에서 락(lock)이 없이
        사용하기에 안전한 함수인지를 알 수 있게 도와준다.
      </PROS>
      <CONS>
        **<code>const</code> 는 말이 많다. 만약 <code>const</code> 변수 하나를
        함수에 넘겨준다면, 그 함수는 반드시 그 프로토타입(혹은 그 변수는
        <code>const_cast</code> 가 필요할 것이다)에 <code>const</code> 를
        가져야 한다. 이것은 라이브러리 함수들을 호출할 때 특정한
        문제가 될 수 있다.
      </CONS>
      <DECISION>
        <p>
          <code>const</code> 변수, 데이터 멤버들, 메서드들 그리고
          인자들은 컴파일 시간 타입 체크 단계를 추가한다. 이것은
          가능하면 빨리 오류를 찾기 위해서 더 좋다. 그러므로 
          <code>const</code> 를 가능한 곳마다 사용하기를
          강력히 권장한다.
        </p>
        <ul>
          <li> 만약 함수가 레퍼런스나 포인터에 의해서 전달된
            인자를 변경하지 않으면, 인자는 <code>const</code>가
            되어야 한다.
               </li>
          <li> 가능한 곳마다 <code>const</code>로 메서드를 선언해라.
               접근자는 거의 항상 <code>const</code> 가 되어야 한다.
               그외 다른 메서드들은 어떤 데이터 멤버들을 수정하지 않고,
               어떤 비-<code>const</code> 메서드들도 호출하지 않고,
               비-<code>const</code> 포인터 혹은 데이터 멤버에 대한
               비-<code>const</code> 레퍼런스도 반환하지 않는다면
               const 가 되어야 한다.
               </li>
          <li> 생성된 후 수정될 필요가 없는 데이터 멤버들은 
               <code>const</code> 로 만드는 것을 고려해라
               </li>
        </ul>
        <p>
          <code>mutable</code> 키워드는 허용되지만, 쓰레드와 함께
          사용될 때 안전하지 않다. 그래서 쓰레드 안전이 먼저
          조심스럽게 고려되어야 한다.
        </p>
      </DECISION>
      <SUBSECTION title="const 의 위치">
        <p>
          어떤 사람들은 <code>const int* foo</code> 보다 
          <code>int const *foo</code> 형태를 선호한다.
          그들은 보다 일관적이기 때문에 이것이 더 읽기 쉽다고 주장한다.
          이것은 <code>const</code> 가 항상 기술하는 객체를 따르는
          규칙을 유지한다.
          그러나, 이 일관성 주장은, <code>const</code> 표현식 대부분은
          단지 하나의 <code>const</code>를 가지고, **밑에 있는 값에
          적용되기 때문에, 거의 깊게 중첩되지 않는 포인터 표현식을 가지는
          코드에는 적용되지 않는다.
          이런 경우들에, 유지할 일관성은 없다.
          "형용사"(<code>const</code>) 가 "명사" (<code>int</code>)보다
          앞에 있는 것이 영어를 따르기 때문에 <code>const</code>를
          먼저 위치하는 것은 아마 좀 더 가독성있을 것이다.
        </p>
        <p>
          <code>const</code> 를 먼저 위치하는 것을 권장하지만, 
          꼭 해야하는 것은 아니다. 그런 코드에서 일관성을 지켜라.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="constexpr의 사용">
    <SUMMARY>
      C++11에서, 진짜 상수를 정의하거나, 상수 초기화를 확실히하기 위해
      <code>constexpr</code>를 사용해라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        어떤 변수들은 변수들이 (예를 들어 컴파일/링크 시간에 고정되는)
        진짜 상수라는 것을 알리기 위해 <code>constexpr</code>로 선언될 수 있다. 
        **<code>constexpr</code> 변수들을 정의하기 위해서 사용되는 어떤 함수들과 생성자들은 <code>constexpr</code> 로 선언될 수 있다.
      </DEFINITION>
      <PROS>
        Use of <code>constexpr</code> enables
        definition of constants with floating-point expressions
        rather than just literals;
        definition of constants of user-defined types; and
        definition of constants with function calls.
      </PROS>
      <CONS>
        너무 이르게 constexpr 로 표시하는 것은 나중에 다운그레이드를 해야할 때,
        마이그레이션 문제를 유발할 수 있다.
        **constexpr 함수과 생성자들에서 어떤 것이 허용되어야하는지의 현재 제한은
        불분명한 회피 방법들을 이런 개념들 안에서 유발할 수 있다.
      </CONS>
      <DECISION>
        <p>
          **<code>constexpr</code> 개념은 인터페이스의 constant 부분으로써
          보다 견고한 구체화를 가능하게 한다.
          진짜 상수를 구체화하고 그 개념들을 지원하는 함수들을 구체화하기
          위해 <code>constexpr</code> 를 사용해라. 
          <code>constexpr</code> 를 사용하기 위해 함수 정의를 복잡하게하는
           것을 피해라.
          inline 을 강요하기 위해 <code>constexpr</code> 를 사용하지 마라.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="정수 타입들">
    <SUMMARY>
      C++ 정수 내장 타입 중에, 유일하게 사용하는 것은 <code>int</code> 이다.
      만약 프로그램이 다른 크기의 변수들이 필요하면, <code>int16_t</code>처럼
      <code>&lt;stdint.h&gt;</code> 에 있는 길이가 정해진 정수 타입을 사용해라.
      만약 변수가 2^31 (2GiB) 보다 크거나 같은 값을 표현한다면,
      <code>int64_t</code> 같은 64비트 타입을 사용해라.
      만약 값이 <code>int</code> 에 담기 너무 크지 않더라도, 더 큰 타입을
      요구하는 중간 계산값이 쓰일 수 있다.
      의심되면, 더 큰 타입을 사용해라.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        C++ 은 정수 타입의 크기를 명시하지 않는다. 전형적으로 사람들은
        <code>short</code>가 16비트, <code>int</code>가 32비트,
         <code>long</code>이 32비트, <code>long long</code>이 64비트라고
         가정한다.

      </DEFINITION>
      <PROS>
        선언의 획일성.
      </PROS>
      <CONS>
        C++ 의 정수 타입의 크기들은 컴파일러와 아키텍쳐에 따라 
        달라질 수 있다.
      </CONS>
      <DECISION>
        <p>
          
          <code>&lt;stdint.h&gt;</code>는 <code>int16_t</code>,
           <code>uint32_t</code>, <code>int64_t</code> 같은
           타입들을 정의한다.
          정수의 크기를 보장해야 할 필요가 있을 때 <code>short</code>,
           <code>unsigned long long</code> 보다 이런 타입들을 항상 사용해야 한다. 
           C 정수 타입들 중, 단지 <code>int</code> 만 사용되어야 한다.
           적절하면, <code>size_t</code>와 <code>ptrdiff_t</code> 같은
           표준 타입들을 사용하는 것은 괜찮다.
        </p>
        <p>
          반복문 카운터처럼 꽤 크지 않은 정수들일 때 우리는 매우 자주
          <code>int</code>를 사용한다. 이런 것들은 plain old <code>int</code>
          를 사용해라. <code>int</code>가 최소 32비트라는 것을 가정해야하지만,
          32비트가 넘는다고 가정하지 마라. 만약 64비트 정수 타입이 필요하다면,
          <code>int64_t</code> 혹은 <code>uint64_t</code>를 사용해라.
        </p>
        <p>
          "큰" 정수가 될 수 있다면 <code>int64_t</code>를 써라.
          
        </p>
        <p>
          숫자보다 비트 패턴을 표현하거나, 2^N 나누기(modulo) 오버플로우를 정의하는 것이
          필요한 것이 아니라면 <code>uint32_t</code> 같은 부호없는 정수 타입을 사용하지 마라.
          특히, 숫자가 절대 음수가 되지 않을 것을 말하기 위해 부호없는 타입들을 사용하지 마라.
          대신에, assert 를 사용해라.
        </p>
        
        <p>
          만약 크기를 리턴하는 컨테이너 코드라면, 컨테이너의 어떠한 사용에서도
          가능한 크기를 수용할 수 있는 타입을 사용하는 것을 확실히 해라.
          의심된다면, 작은 타입보다, 더 큰 타입을 사용해라.
        </p>
        <p>
          정수 타입들을 변환할 때 조심해라. 정수 변환과 promotion들은
          직관적이지 않은 행동을 유발할 수 있다.
        </p>
      </DECISION>

      <SUBSECTION title="부호없는 정수들">
        <p>
          (어떤 교과서의 저자들을 포함하여)어떤 사람들은 절대 음수가
          될 수 없는 숫자를 표현하기 위해서 부호없는 타입들을
          사용하는 것을 권장한다. 이것은 셀프-문서화(self-documentation)의 한
          형태로 의도된 것이다. 그러나, C 에서 그런 문서화의 장점은 
          그것들이 만들어낼 수 있는 실제 버그들보다 좋지 않다.
          아래의 코드를 생각해보자.
        </p>
        <CODE_SNIPPET>
          for (unsigned int i = foo.Length()-1; i &gt;= 0; --i) ...
        </CODE_SNIPPET>
        <p>
          이 코드는 절대 종료하지 않는다! 가끔 gcc 는 이 버그를
          경고해주지만, 경고하지 않는 경우도 많다. 마찬가지로
          부호있는(signed) 변수들과 부호없는(unsigned) 변수들을 비교할 때
          나쁜 버그들이 발생할 수 있다. 기본적으로, C의 type-promotion
          scheme 은 부호없는 타입들이 기대하는 것과 다르게 행동하는
          것의 원인이 된다.
        </p>
        <p>
          그래서, assert 를 사용해서 변수가 음수가 아니라는 것을 문서화해라.
          부호없는 타입을 사용하지 마라.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="64-bit Portability">
    <SUMMARY>
      Code should be 64-bit and 32-bit friendly.  Bear in mind problems of
      printing, comparisons, and structure alignment.
    </SUMMARY>
    <BODY>
      <ul>
        <li>
          <p>
            <code>printf()</code> specifiers for some types are
            not cleanly portable between 32-bit and 64-bit
            systems. C99 defines some portable format
            specifiers. Unfortunately, MSVC 7.1 does not
            understand some of these specifiers and the
            standard is missing a few, so we have to define our
            own ugly versions in some cases (in the style of the
            standard include file <code>inttypes.h</code>):
          </p>
          <CODE_SNIPPET>
            // printf macros for size_t, in the style of inttypes.h
            #ifdef _LP64
            #define __PRIS_PREFIX "z"
            #else
            #define __PRIS_PREFIX
            #endif

            // Use these macros after a % in a printf format string
            // to get correct 32/64 bit behavior, like this:
            // size_t size = records.size();
            // printf("%"PRIuS"\n", size);

            #define PRIdS __PRIS_PREFIX "d"
            #define PRIxS __PRIS_PREFIX "x"
            #define PRIuS __PRIS_PREFIX "u"
            #define PRIXS __PRIS_PREFIX "X"
            #define PRIoS __PRIS_PREFIX "o"
          </CODE_SNIPPET>
          <table border="1" summary="portable printf specifiers">
            <TBODY>
              <tr align="center">
                <th>Type</th>
                <th>DO NOT use</th>
                <th>DO use</th>
                <th>Notes</th>
              </tr>
              <tr align="center">
                <td><code>void *</code> (or any pointer)</td>
                <td><code>%lx</code></td>
                <td><code>%p</code></td>
                <td> </td>
              </tr>
              
              <tr align="center">
                <td><code>int64_t</code></td>
                <td><code>%qd</code>,
                     <code>%lld</code></td>
                <td><code>%"PRId64"</code></td>
                <td/>
              </tr>
              
              <tr align="center">
                <td><code>uint64_t</code></td>
                <td><code>%qu</code>,
                    <code>%llu</code>,
                    <code>%llx</code></td>
                <td><code>%"PRIu64"</code>,
                    <code>%"PRIx64"</code></td>
                <td/>
              </tr>
              
              <tr align="center">
                <td><code>size_t</code></td>
                <td><code>%u</code></td>
                <td><code>%"PRIuS"</code>,
                    <code>%"PRIxS"</code></td>
                  <td>
                      C99 specifies <code>%zu</code></td>
              </tr>
              <tr align="center">
                <td><code>ptrdiff_t</code></td>
                <td><code>%d</code></td>
                <td><code>%"PRIdS"</code></td>
                <td>
                    C99 specifies <code>%td</code></td>
              </tr>
              
            </TBODY>
          </table>
          <p>
            Note that the <code>PRI*</code> macros expand to independent
            strings which are concatenated by the compiler. Hence
            if you are using a non-constant format string, you
            need to insert the value of the macro into the format,
            rather than the name. It is still possible, as usual,
            to include length specifiers, etc., after the
            <code>%</code> when using the <code>PRI*</code>
            macros. So, e.g.  <code>printf("x = %30"PRIuS"\n",
            x)</code> would expand on 32-bit Linux to
            <code>printf("x = %30" "u" "\n", x)</code>, which the
            compiler will treat as <code>printf("x = %30u\n",
            x)</code>.
          </p>
          
          </li>

        <li> Remember that <code>sizeof(void *)</code> !=
             <code>sizeof(int)</code>.  Use <code>intptr_t</code> if
             you want a pointer-sized integer.
             </li>

        <li> You may need to be careful with structure alignments,
             particularly for structures being stored on disk. Any
             class/structure with a
             
             <code>int64_t</code>/<code>uint64_t</code>
             member will by default end up being 8-byte aligned on a 64-bit
             system. If you have such structures being shared on disk
             between 32-bit and 64-bit code, you will need to ensure
             that they are packed the same on both architectures.
             
             Most compilers offer a way to alter
             structure alignment.  For gcc, you can use
             <code>__attribute__((packed))</code>.  MSVC offers
             <code>#pragma pack()</code> and
             <code>__declspec(align())</code>.
             </li>

        <li>
             
             Use the <code>LL</code> or <code>ULL</code> suffixes as
             needed to create 64-bit constants.  For example:
             
             <CODE_SNIPPET>
             int64_t my_value = 0x123456789LL;
             uint64_t my_mask = 3ULL &lt;&lt; 48;
             </CODE_SNIPPET>
             </li>

        <li> If you really need different code on 32-bit and 64-bit
             systems, use <code>#ifdef _LP64</code> to choose between
             the code variants. (But please avoid this if
             possible, and keep any such changes localized.)
             </li>
      </ul>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Preprocessor Macros">
    <SUMMARY>
      Be very cautious with macros.  Prefer inline functions, enums,
      and <code>const</code> variables to macros.
    </SUMMARY>
    <BODY>
      <p>
        Macros mean that the code you see is not the same as the code
        the compiler sees.  This can introduce unexpected behavior,
        especially since macros have global scope.
      </p>
      <p>
        Luckily, macros are not nearly as necessary in C++ as they are
        in C.  Instead of using a macro to inline performance-critical
        code, use an inline function.  Instead of using a macro to
        store a constant, use a <code>const</code> variable.  Instead of
        using a macro to "abbreviate" a long variable name, use a
        reference.  Instead of using a macro to conditionally compile code
        ... well, don't do that at all (except, of course, for the
        <code>#define</code> guards to prevent double inclusion of
        header files).  It makes testing much more difficult.
      </p>
      <p>
        Macros can do things these other techniques cannot, and you do
        see them in the codebase, especially in the lower-level
        libraries.  And some of their special features (like
        stringifying, concatenation, and so forth) are not available
        through the language proper.  But before using a macro,
        consider carefully whether there's a non-macro way to achieve
        the same result.
      </p>
      <p>
        The following usage pattern will avoid many problems with
        macros; if you use macros, follow it whenever possible:
      </p>
      <ul>
        <li> Don't define macros in a <code>.h</code> file.
             </li>
        <li> <code>#define</code> macros right before you use them,
             and <code>#undef</code> them right after.
             </li>
        <li> Do not just <code>#undef</code> an existing macro before
             replacing it with your own; instead, pick a name that's
             likely to be unique.
             </li>
        <li> Try not to use macros that expand to unbalanced C++
             constructs, or at least document that behavior well.
             </li>
        <li> Prefer not using <code>##</code> to generate function/class/variable
             names.
             </li>
      </ul>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="0 and nullptr/NULL">
  <SUMMARY>
    Use <code>0</code> for integers, <code>0.0</code> for reals,
    <code>nullptr</code> (or <code>NULL</code>) for pointers,
    and <code>'\0'</code> for chars.
  </SUMMARY>
  <BODY>
    <p>
      Use <code>0</code> for integers and <code>0.0</code> for reals.
      This is not controversial.
    </p>
    <p>
    
    
      For pointers (address values), there is a choice between <code>0</code>,
      <code>NULL</code>, and <code>nullptr</code>.
      For projects that allow C++11 features, use <code>nullptr</code>.
      For C++03 projects, we prefer <code>NULL</code> because it looks like a
      pointer.  In fact, some C++ compilers provide special definitions of
      <code>NULL</code> which enable them to give useful warnings,
      particularly in situations where <code>sizeof(NULL)</code> is not equal
      to <code>sizeof(0)</code>.
    
    </p>
    <p>
      Use <code>'\0'</code> for chars.
      This is the correct type and also makes code more readable.
    </p>
  </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="sizeof">
  <SUMMARY>
    Prefer <code>sizeof(<var>varname</var>)</code> to
    <code>sizeof(<var>type</var>)</code>.
  </SUMMARY>
  <BODY>
    <p>
      Use <code>sizeof(<var>varname</var>)</code>
      when you take the size of a particular variable.
      <code>sizeof(<var>varname</var>)</code> will update
      appropriately if someone changes the variable type
      either now or later.
      You may use <code>sizeof(<var>type</var>)</code>
      for code unrelated to any particular variable,
      such as code that manages an external or internal
      data format where a variable of an appropriate C++ type
      is not convenient.
    </p>
    <p>
      <CODE_SNIPPET>
        Struct data;
        memset(&amp;data, 0, sizeof(data));
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        memset(&amp;data, 0, sizeof(Struct));
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
        if (raw_size &lt; sizeof(int)) {
          LOG(ERROR) &lt;&lt; "compressed record not big enough for count: " &lt;&lt; raw_size;
          return false;
        }
      </CODE_SNIPPET>
    </p>
  </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="auto">
  <SUMMARY>
    Use <code>auto</code> to avoid type names that are just clutter.
    Continue to use manifest type declarations when it helps readability,
    and never use <code>auto</code> for anything but local variables.
    
  </SUMMARY>
  <BODY>
    <DEFINITION>
      In C++11, a variable whose type is given as <code>auto</code> will be given
      a type that matches that of the expression used to initialize
      it. You can use <code>auto</code> either to initialize a
      variable by copying, or to bind a reference.
        <CODE_SNIPPET>
          vector&lt;string&gt; v;
          ...
          auto s1 = v[0];  // Makes a copy of v[0].
          const auto&amp; s2 = v[0];  // s2 is a reference to v[0].
        </CODE_SNIPPET>
    </DEFINITION>
    <PROS>
      <p>
        C++ type names can sometimes be long and cumbersome,
        especially when they involve templates or namespaces. In a statement like
        <CODE_SNIPPET>
          sparse_hash_map&lt;string, int&gt;::iterator iter = m.find(val);
        </CODE_SNIPPET>
        the return type is hard to read, and obscures the primary
        purpose of the statement. Changing it to
        <CODE_SNIPPET>
          auto iter = m.find(val);
        </CODE_SNIPPET>
        makes it more readable.
      </p>
      <p>
        Without <code>auto</code> we are sometimes forced to write a
        type name twice in the same expression, adding no value
        for the reader, as in
        <CODE_SNIPPET>
          diagnostics::ErrorStatus* status = new diagnostics::ErrorStatus("xyz");
        </CODE_SNIPPET>
      </p>
      <p>
        Using <code>auto</code> makes it easier to use intermediate
        variables when appropriate, by reducing the burden of writing
        their types explicitly.
      </p>
    </PROS>
    <CONS>
      <p>Sometimes code is clearer when types are manifest, especially when
        a variable's initialization depends on things that were declared
        far away. In an expression like
        <CODE_SNIPPET>
          auto i = x.Lookup(key);
        </CODE_SNIPPET>
        it may not be obvious what <code>i</code>'s type is, if <code>x</code>
        was declared hundreds of lines earlier.
      </p>

      <p>Programmers have to understand the difference between <code>auto</code>
        and <code>const auto&amp;</code> or they'll get copies when
        they didn't mean to.
      </p>

      <p>The interaction between <code>auto</code> and C++11
        brace-initialization can be confusing. The declarations
        <CODE_SNIPPET>
          auto x(3);  // Note: parentheses.
          auto y{3};  // Note: curly braces.
        </CODE_SNIPPET>
        mean different things — <code>x</code> is
        an <code>int</code>, while <code>y</code> is
        an <code>initializer_list</code>. The same applies to other
        normally-invisible proxy types.
        
      </p>

      <p>If an <code>auto</code> variable is used as part of an
        interface, e.g. as a constant in a header, then a programmer
        might change its type while only intending to change its
        value, leading to a more radical API change than intended.</p>
    </CONS>
    <DECISION>
      <p><code>auto</code> is permitted, for local variables only.
        Do not use <code>auto</code> for file-scope or namespace-scope
        variables, or for class members. Never assign a braced initializer list
        to an <code>auto</code>-typed variable.</p>
      <p>The <code>auto</code> keyword is also used in an unrelated
        C++11 feature: it's part of the syntax for a new kind of
        function declaration with a trailing return type. Function
        declarations with trailing return types are not permitted.</p>
    </DECISION>
  </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Brace Initialization">
  <SUMMARY>
    You may use brace initialization. 
  </SUMMARY>
  <BODY>
    <p>In C++03, aggregate types (arrays and structs with no constructor) could
    be initialized using braces.
      <CODE_SNIPPET>
        struct Point { int x; int y; };
        Point p = {1, 2};
      </CODE_SNIPPET></p>

    <p>In C++11, this syntax has been expanded for use with all other datatypes.
    The brace initialization form is called <i>braced-init-list</i>. Here are
    a few examples of its use.
      <CODE_SNIPPET>
        // Vector takes lists of elements.
        vector&lt;string&gt; v{"foo", "bar"};

        // The same, except this form cannot be used if the initializer_list
        // constructor is explicit. You may choose to use either form.
        vector&lt;string&gt; v = {"foo", "bar"};

        // Maps take lists of pairs. Nested braced-init-lists work.
        map&lt;int, string&gt; m = {{1, "one"}, {2, "2"}};

        // braced-init-lists can be implicitly converted to return types.
        vector&lt;int&gt; test_function() {
          return {1, 2, 3};
        }

        // Iterate over a braced-init-list.
        for (int i : {-1, -2, -3}) {}

        // Call a function using a braced-init-list.
        void test_function2(vector&lt;int&gt; v) {}
        test_function2({1, 2, 3});
      </CODE_SNIPPET></p>

    <p>User data types can also define constructors that take
    <code>initializer_list</code>, which is automatically created from
    <i>braced-init-list</i>:
      <CODE_SNIPPET>
        class MyType {
         public:
          // initializer_list is a reference to the underlying init list,
          // so it can be passed by value.
          MyType(initializer_list&lt;int&gt; init_list) {
            for (int element : init_list) {}
          }
        };
        MyType m{2, 3, 5, 7};
      </CODE_SNIPPET></p>

    <p>Finally, brace initialization can also call ordinary constructors of
    data types that do not have <code>initializer_list</code> constructors.
      <CODE_SNIPPET>
        double d{1.23};
        // Calls ordinary constructor as long as MyOtherType has no
        // initializer_list constructor.
        class MyOtherType {
         public:
          explicit MyOtherType(string);
          MyOtherType(int, string);
        };
        MyOtherType m = {1, "b"};
        // If the constructor is explicit, you can't use the "= {}" form.
        MyOtherType m{"b"};
      </CODE_SNIPPET></p>

    <p>Never assign a <i>braced-init-list</i> to an auto local variable. In the
    single element case, what this means can be confusing.
      <BAD_CODE_SNIPPET>
        auto d = {1.23};        // d is an initializer_list&lt;double&gt;
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
        auto d = double{1.23};  // Good -- d is a double, not an initializer_list.
      </CODE_SNIPPET>
    </p>
  </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Lambda expressions">
    <SUMMARY>
      Do not use lambda expressions, or the related <code>std::function</code>
      or <code>std::bind</code> utilities.
    </SUMMARY>
    <BODY>
      <DEFINITION>
        Lambda expressions are a concise way of creating anonymous function
        objects. They're often useful when passing functions as arguments.
        For example: <code>std::sort(v.begin(), v.end(),
        [](string x, string y) { return x[1] &lt; y[1]; });</code> Lambdas were
        introduced in C++11 along with a set of utilities for working with
        function objects, such as the polymorphic wrapper
        <code>std::function</code>.
      </DEFINITION>
      <PROS>
        <ul>
          <li>
            Lambdas are much more concise than other ways of defining function
            objects to be passed to STL algorithms, which can be a readability
            improvement.
          </li>
          <li>
            Lambdas, <code>std::function</code>, and <code>std::bind</code>
            can be used in combination as a general purpose callback
            mechanism; they make it easy to write functions that take bound
            functions as arguments.
          </li>
        </ul>
      </PROS>
      <CONS>
        <ul>
          <li>
            Variable capture in lambdas can be tricky, and might be a new
            source of dangling-pointer bugs.
          </li>
          <li>
            It's possible for use of lambdas to get out of hand; very long
            nested anonymous functions can make code harder to understand.
          </li>
          
        </ul>
      </CONS>
      <DECISION>
        <p>
          Do not use lambda expressions, <code>std::function</code> or
          <code>std::bind</code>.
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Boost">
  <SUMMARY>
    Use only approved libraries from the Boost library collection.
  </SUMMARY>
  <BODY>
    <DEFINITION>
      The <a href="http://www.boost.org/">Boost library collection</a> is
      a popular collection of peer-reviewed, free, open-source C++ libraries.
    </DEFINITION>
    <PROS>
      Boost code is generally very high-quality, is widely portable, and fills
      many important gaps in the C++ standard library, such as type traits,
      better binders, and better smart pointers. It also provides an
      implementation of the TR1 extension to the standard library.
    </PROS>
    <CONS>
      Some Boost libraries encourage coding practices which can hamper
      readability, such as metaprogramming and other advanced template
      techniques, and an excessively "functional" style of programming.
      
    </CONS>
    <DECISION>
      
      <div>
        
        In order to maintain a high level of readability for all contributors
        who might read and maintain code, we only allow an approved subset of
        Boost features.  Currently, the following libraries are permitted:
        <ul>
          <li> <a href="http://www.boost.org/libs/utility/call_traits.htm">
               Call Traits</a> from <code>boost/call_traits.hpp</code>
               </li>
          <li> <a href="http://www.boost.org/libs/utility/compressed_pair.htm">
               Compressed Pair</a> from <code>boost/compressed_pair.hpp</code>
               </li>
          <li> <a href="http://www.boost.org/libs/graph/">
               The Boost Graph Library (BGL)</a> from <code>boost/graph</code>,
               except serialization (<code>adj_list_serialize.hpp</code>) and
               parallel/distributed algorithms and data structures
               (<code>boost/graph/parallel/*</code> and
               <code>boost/graph/distributed/*</code>).
               </li>
          <li> <a href="http://www.boost.org/libs/property_map/">
               Property Map</a> from <code>boost/property_map</code>, except
               parallel/distributed property maps
               (<code>boost/property_map/parallel/*</code>).
               </li>
          <li> The part of
               <a href="http://www.boost.org/libs/iterator/">
               Iterator</a> that deals with defining iterators:
               <code>boost/iterator/iterator_adaptor.hpp</code>,
               <code>boost/iterator/iterator_facade.hpp</code>, and
               <code>boost/function_output_iterator.hpp</code></li>
          <li> The part of
               <a href="http://www.boost.org/libs/polygon/">
               Polygon</a> that deals with Voronoi diagram construction and
               doesn't depend on the rest of Polygon:
               <code>boost/polygon/voronoi_builder.hpp</code>,
               <code>boost/polygon/voronoi_diagram.hpp</code>, and
               <code>boost/polygon/voronoi_geometry_type.hpp</code></li>
          <li> <a href="http://www.boost.org/libs/bimap/">
               Bimap</a> from <code>boost/bimap</code>
               </li>
          <li> <a href="http://www.boost.org/libs/math/doc/html/dist.html">
               Statistical Distributions and Functions</a> from
               <code>boost/math/distributions</code>
               </li>

        </ul>
        We are actively considering adding other Boost features to the list, so
        this list may be expanded in the future.
      </div>
      <p>
      The following libraries are permitted, but their use is discouraged
      because they've been superseded by standard libraries in C++11:
      <ul>
        <li> <a href="http://www.boost.org/libs/array/">
             Array</a> from <code>boost/array.hpp</code>: use
             <a href="http://en.cppreference.com/w/cpp/container/array">
             <code>std::array</code></a> instead.
             </li>
        <li> <a href="http://www.boost.org/libs/ptr_container/">
             Pointer Container</a> from <code>boost/ptr_container</code>:
             use containers of <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr">
             <code>std::unique_ptr</code></a> instead.
             </li>
      </ul>
      </p>
    </DECISION>
  </BODY>
  </STYLEPOINT>

  

  <STYLEPOINT title="C++11">
  <SUMMARY>
    Use libraries and language extensions from C++11 (formerly
    known as C++0x) when appropriate.
    
    Consider portability to other environments before
    using C++11 features in your project.
    
  </SUMMARY>
  <BODY>
    <DEFINITION>
      C++11 is the latest ISO C++ standard.
      It contains
      <a href="http://en.wikipedia.org/wiki/C%2B%2B11">significant
      changes</a> both to the language and libraries.
      
    </DEFINITION>
    <PROS>
      C++11 has become the official standard, and eventually will
      be supported by most C++ compilers.  It standardizes some common C++
      extensions that we use already, allows shorthands for some operations,
      and has some performance and safety improvements.
    </PROS>
    <CONS>
      <p>
        The C++11 standard is substantially more complex than its predecessor
        (1,300 pages versus 800 pages), and is
        unfamiliar to many developers.  The long-term effects of some
        features on code readability and maintenance are unknown.  We cannot
        predict when its various features will be implemented uniformly by
        tools that may be of interest, particularly in the case of projects
        that are forced to use older versions of tools.
      </p>
      <p>
        As with <a href="#Boost">Boost</a>, some C++11 extensions encourage
        coding practices that hamper readability—for example by removing
        checked redundancy (such as type names) that may be helpful to readers,
        or by encouraging template metaprogramming.  Other extensions
        duplicate functionality available through existing
        mechanisms, which may lead to
        confusion and conversion costs.
      </p>
      
    </CONS>
    <DECISION>
      <p>
       C++11 features may be used unless specified otherwise. In addition to
       what's described in the rest of the style guide, the following C++11
       features may not be used:
      </p>
      <ul>
        <li>
          Functions with trailing return types, e.g. writing
          <code>auto foo() -&gt; int;</code> instead of
          <code>int foo();</code>, because of a desire to preserve
          stylistic consistency with the many existing function
          declarations.
        </li>
        
        
        
        
        
        <li>
          Compile-time rational numbers (<code>&lt;ratio&gt;</code>),
          because of concerns that it's tied to a more template-heavy
          interface style.
        </li>
        <li>
          The <code>&lt;cfenv&gt;</code> and <code>&lt;fenv.h&gt;</code>
          headers, because many compilers do not support those
          features reliably.
        </li>
        
        <li>
          Lambda expressions, or the related <code>std::function</code> or
          <code>std::bind</code> utilities.
        </li>
      </ul>
    </DECISION>
  </BODY>
  </STYLEPOINT>

</CATEGORY>

<CATEGORY title="Naming">
  <p>
    The most important consistency rules are those that govern
    naming. The style of a name immediately informs us what sort of
    thing the named entity is: a type, a variable, a function, a
    constant, a macro, etc., without requiring us to search for the
    declaration of that entity. The pattern-matching engine in our
    brains relies a great deal on these naming rules.
    
  </p>
  <p>
    Naming rules are pretty arbitrary, but
    
    we feel that consistency is more important than individual preferences
    in this area, so regardless of whether you find them sensible or not,
    the rules are the rules.
  </p>

  <STYLEPOINT title="General Naming Rules">
    <SUMMARY>
      Function names, variable names, and filenames should be
      descriptive; eschew abbreviation.
    </SUMMARY>
    <BODY>
      <p>
        Give as descriptive a name as possible, within reason. Do
        not worry about saving horizontal space as it is far more
        important to make your code immediately understandable by a
        new reader. Do not use abbreviations that are ambiguous or
        unfamiliar to readers outside your project, and do not
        abbreviate by deleting letters within a word.
      </p>
      <CODE_SNIPPET>
        int price_count_reader;    // No abbreviation.
        int num_errors;            // "num" is a widespread convention.
        int num_dns_connections;   // Most people know what "DNS" stands for.
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        int n;                     // Meaningless.
        int nerr;                  // Ambiguous abbreviation.
        int n_comp_conns;          // Ambiguous abbreviation.
        int wgc_connections;       // Only your group knows what this stands for.
        int pc_reader;             // Lots of things can be abbreviated "pc".
        int cstmr_id;              // Deletes internal letters.
      </BAD_CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="File Names">
    <SUMMARY>
      Filenames should be all lowercase and can include underscores
      (<code>_</code>) or dashes (<code>-</code>).  Follow the
      convention that your
      
      project
      uses. If there is no consistent local pattern to follow, prefer "_".
    </SUMMARY>
    <BODY>
      <p>
        Examples of acceptable file names:
      </p>
      <p>
        <code>
          my_useful_class.cc<br/>
          my-useful-class.cc<br/>
          myusefulclass.cc<br/>
          myusefulclass_test.cc  // _unittest and _regtest are deprecated.<br/>
        </code>
      </p>
      <p>
        C++ files should end in <code>.cc</code> and header files
        should end in <code>.h</code>.
      </p>
      <p>
        Do not use filenames that already exist
        in <code>/usr/include</code>, such as <code>db.h</code>.
      </p>
      <p>
        In general, make your filenames very specific.  For example,
        use <code>http_server_logs.h</code> rather
        than <code>logs.h</code>.  A very common case is to have a
        pair of files called, e.g., <code>foo_bar.h</code>
        and <code>foo_bar.cc</code>, defining a class
        called <code>FooBar</code>.
      </p>
      <p>
        Inline functions must be in a <code>.h</code> file. If your
        inline functions are very short, they should go directly into your
        <code>.h</code> file. However, if your inline functions
        include a lot of code, they may go into a third file that
        ends in <code>-inl.h</code>.  In a class with a lot of inline
        code, your class could have three files:
      </p>
      <CODE_SNIPPET>
        url_table.h      // The class declaration.
        url_table.cc     // The class definition.
        url_table-inl.h  // Inline functions that include lots of code.
      </CODE_SNIPPET>
      <p>
        See also the section <a href="#The_-inl.h_Files">-inl.h Files</a>
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Type Names">
    <SUMMARY>
      Type names start with a capital letter and have a capital
      letter for each new word, with no underscores:
      <code>MyExcitingClass</code>, <code>MyExcitingEnum</code>.
    </SUMMARY>
    <BODY>
      <p>
        The names of all types — classes, structs, typedefs, and enums
        — have the same naming convention.  Type names should start
        with a capital letter and have a capital letter for each new
        word.  No underscores.  For example:
      </p>
      <CODE_SNIPPET>
        // classes and structs
        class UrlTable { ...
        class UrlTableTester { ...
        struct UrlTableProperties { ...

        // typedefs
        typedef hash_map&lt;UrlTableProperties *, string&gt; PropertiesMap;

        // enums
        enum UrlTableErrors { ...
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Variable Names">
    <SUMMARY>
      Variable names are all lowercase, with underscores between
      words.  Class member variables have trailing underscores.  For
      instance: <code>my_exciting_local_variable</code>,
      <code>my_exciting_member_variable_</code>.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Common Variable names">
        <p>
          For example:
        </p>
        <CODE_SNIPPET>
          string table_name;  // OK - uses underscore.
          string tablename;   // OK - all lowercase.
        </CODE_SNIPPET>
        <BAD_CODE_SNIPPET>
          string tableName;   // Bad - mixed case.
        </BAD_CODE_SNIPPET>
      </SUBSECTION>

      <SUBSECTION title="Class Data Members">
        <p>
          Data members (also called instance variables or member
          variables) are lowercase with optional underscores like
          regular variable names, but always end with a trailing
          underscore.
        </p>
        <CODE_SNIPPET>
          string table_name_;  // OK - underscore at end.
          string tablename_;   // OK.
        </CODE_SNIPPET>
      </SUBSECTION>

      <SUBSECTION title="Struct Variables">
        <p>
          Data members in structs should be named like regular
          variables without the trailing underscores that data members
          in classes have.
        </p>
        <CODE_SNIPPET>
          struct UrlTableProperties {
            string name;
            int num_entries;
          }
        </CODE_SNIPPET>
        <p>
          See <a HREF="#Structs_vs._Classes">Structs vs. Classes</a> for a
          discussion of when to use a struct versus a class.
        </p>
      </SUBSECTION>

      <SUBSECTION title="Global Variables">
        <p>
          There are no special requirements for global variables,
          which should be rare in any case, but if you use one,
          consider prefixing it with <code>g_</code> or some other
          marker to easily distinguish it from local variables.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Constant Names">
    <SUMMARY>
      Use a <code>k</code> followed by mixed case:
      <code>kDaysInAWeek</code>.
    </SUMMARY>
    <BODY>
      <p>
        All compile-time constants, whether they are declared locally,
        globally, or as part of a class, follow a slightly different
        naming convention from other variables. Use a <code>k</code>
        followed by words with uppercase first letters:
      </p>
      <CODE_SNIPPET>
        const int kDaysInAWeek = 7;
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Function Names">
    <SUMMARY>
      Regular functions have mixed case; accessors and mutators match
      the name of the variable: <code>MyExcitingFunction()</code>,
      <code>MyExcitingMethod()</code>,
      <code>my_exciting_member_variable()</code>,
      <code>set_my_exciting_member_variable()</code>.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Regular Functions">
        <p>
          Functions should start with a capital letter and have a
          capital letter for each new word. No underscores.
        </p>
        <p>
          If your function crashes upon an error, you should append OrDie to
          the function name. This only applies to functions which could be
          used by production code and to errors that are reasonably
          likely to occur during normal operation.
        </p>
        <CODE_SNIPPET>
          AddTableEntry()
          DeleteUrl()
          OpenFileOrDie()
        </CODE_SNIPPET>
      </SUBSECTION>

      <SUBSECTION title="Accessors and Mutators">
        <p>
          Accessors and mutators (get and set functions) should match
          the name of the variable they are getting and setting.  This
          shows an excerpt of a class whose instance variable is
          <code>num_entries_</code>.
        </p>
        <CODE_SNIPPET>
          class MyClass {
           public:
            ...
            int num_entries() const { return num_entries_; }
            void set_num_entries(int num_entries) { num_entries_ = num_entries; }

           private:
            int num_entries_;
          };
        </CODE_SNIPPET>
        <p>
          You may also use lowercase letters for other very short
          inlined functions. For example if a function were so cheap
          you would not cache the value if you were calling it in a
          loop, then lowercase naming would be acceptable.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Namespace Names">
    
    <SUMMARY>
      Namespace names are all lower-case, and based on project names and
      possibly their directory structure:
      <code>google_awesome_project</code>.
    </SUMMARY>
    <BODY>
      <p>
        See <a HREF="#Namespaces">Namespaces</a> for a discussion of
        namespaces and how to name them.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Enumerator Names">
    <SUMMARY>
      Enumerators should be named <i>either</i> like
      <A HREF="#Constant_Names">constants</A> or like
      <A HREF="#Macro_Names">macros</A>: either <code>kEnumName</code>
      or <code>ENUM_NAME</code>.
    </SUMMARY>
    <BODY>
      <p>
        Preferably, the individual enumerators should be named like
        <A HREF="#Constant_Names">constants</A>.  However, it is also
        acceptable to name them like <A HREF="#Macro_Names">macros</A>.    The enumeration name,
        <code>UrlTableErrors</code> (and
        <code>AlternateUrlTableErrors</code>), is a type, and
        therefore mixed case.
      </p>
      <CODE_SNIPPET>
        enum UrlTableErrors {
          kOK = 0,
          kErrorOutOfMemory,
          kErrorMalformedInput,
        };
        enum AlternateUrlTableErrors {
          OK = 0,
          OUT_OF_MEMORY = 1,
          MALFORMED_INPUT = 2,
        };
      </CODE_SNIPPET>
      <p>
        Until January 2009, the style was to name enum values like
        <A HREF="#Macro_Names">macros</A>.  This caused problems with
        name collisions between enum values and macros.  Hence, the
        change to prefer constant-style naming was put in place.  New
        code should prefer constant-style naming if possible.
        However, there is no reason to change old code to use
        constant-style names, unless the old names are actually
        causing a compile-time problem.
      </p>
      
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Macro Names">
    <SUMMARY>
      You're not really going to <A HREF="#Preprocessor_Macros">define
      a macro</A>, are you?  If you do, they're like this:
      <code>MY_MACRO_THAT_SCARES_SMALL_CHILDREN</code>.
    </SUMMARY>
    <BODY>
      <p>
        Please see the <a href="#Preprocessor_Macros">description of
        macros</a>; in general macros should <em>not</em> be used.
        However, if they are absolutely needed, then they should be
        named with all capitals and underscores.
      </p>
      <CODE_SNIPPET>
        #define ROUND(x) ...
        #define PI_ROUNDED 3.0
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Exceptions to Naming Rules">
    <SUMMARY>
      If you are naming something that is analogous to an existing C
      or C++ entity then you can follow the existing naming convention
      scheme.
    </SUMMARY>
    <BODY>
      <p>
        <dl>
          <dt> <code>bigopen()</code> </dt>
          <dd>   function name, follows form of <code>open()</code> </dd>
          <dt> <code>uint</code> </dt>
          <dd>   <code>typedef</code> </dd>
          <dt> <code>bigpos</code> </dt>
          <dd>   <code>struct</code> or <code>class</code>, follows form of
                 <code>pos</code> </dd>
          <dt> <code>sparse_hash_map</code> </dt>
          <dd>   STL-like entity; follows STL naming conventions </dd>
          <dt> <code>LONGLONG_MAX</code> </dt>
          <dd>   a constant, as in <code>INT_MAX</code> </dd>
        </dl>
      </p>
    </BODY>
  </STYLEPOINT>
</CATEGORY>

<CATEGORY title="Comments">
  <p>
    Though a pain to write, comments are absolutely vital to keeping our
    code readable.  The following rules describe what you should
    comment and where.  But remember: while comments are very
    important, the best code is self-documenting.  Giving sensible
    names to types and variables is much better than using obscure
    names that you must then explain through comments.
  </p>
  <p>
    When writing your comments, write for your audience: the next
    
    contributor
    who will need to understand your code.  Be generous — the next
    one may be you!
  </p>

  <STYLEPOINT title="Comment Style">
    <SUMMARY>
      Use either the <code>//</code> or <code>/* */</code> syntax, as long
      as you are consistent.
    </SUMMARY>
    <BODY>
      <p>
        You can use either the <code>//</code> or the <code>/* */</code>
        syntax; however, <code>//</code> is <em>much</em> more common.
        Be consistent with how you comment and what style you use where.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="File Comments">
    <SUMMARY>
      Start each file with license boilerplate,
      followed by a description of its contents.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Legal Notice and Author Line">
        
        <p>
          Every file should contain license boilerplate.
          Choose the appropriate boilerplate for the license used by the project
          (for example, Apache 2.0, BSD, LGPL, GPL).
        </p>
        <p>
          If you make significant changes to a file with an author line,
          consider deleting the author line.
        </p>
      </SUBSECTION>

      <SUBSECTION title="File Contents">
        <p>
          Every file should have a comment at the top describing its contents.
        </p>
        <p>
          Generally a <code>.h</code> file will describe the classes
          that are declared in the file with an overview of what they
          are for and how they are used. A <code>.cc</code> file
          should contain more information about implementation details
          or discussions of tricky algorithms. If you feel the
          implementation details or a discussion of the algorithms
          would be useful for someone reading the <code>.h</code>,
          feel free to put it there instead, but mention in the
          <code>.cc</code> that the documentation is in the
          <code>.h</code> file.
        </p>
        <p>
          Do not duplicate comments in both the <code>.h</code> and
          the <code>.cc</code>. Duplicated comments diverge.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Class Comments">
    <SUMMARY>
      Every class definition should have an accompanying comment that
      describes what it is for and how it should be used.
    </SUMMARY>
    <BODY>
      <CODE_SNIPPET>
        // Iterates over the contents of a GargantuanTable.  Sample usage:
        //    GargantuanTableIterator* iter = table-&gt;NewIterator();
        //    for (iter-&gt;Seek("foo"); !iter-&gt;done(); iter-&gt;Next()) {
        //      process(iter-&gt;key(), iter-&gt;value());
        //    }
        //    delete iter;
        class GargantuanTableIterator {
          ...
        };
      </CODE_SNIPPET>
      <p>
        If you have already described a class in detail in the
        comments at the top of your file feel free to simply state
        "See comment at top of file for a complete description", but
        be sure to have some sort of comment.
      </p>
      <p>
        Document the synchronization assumptions the class makes, if
        any.  If an instance of the class can be accessed by multiple
        threads, take extra care to document the rules and invariants
        surrounding multithreaded use.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Function Comments">
    <SUMMARY>
      Declaration comments describe use of the function; comments at
      the definition of a function describe operation.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Function Declarations">
        <p>
          Every function declaration should have comments immediately
          preceding it that describe what the function does and how to
          use it.  These comments should be descriptive ("Opens the
          file") rather than imperative ("Open the file"); the comment
          describes the function, it does not tell the function what
          to do.  In general, these comments do not describe how the
          function performs its task.  Instead, that should be left to
          comments in the function definition.
        </p>
        <p>
          Types of things to mention in comments at the function
          declaration:
        </p>
        <ul>
          <li> What the inputs and outputs are.
               </li>
          <li> For class member functions:  whether the object
               remembers reference arguments beyond the
               duration of the method call, and whether it will
               free them or not.
               </li>
          <li> If the function allocates memory that the caller
               must free.
               </li>
          <li> Whether any of the arguments can be a null pointer.
               </li>
          <li> If there are any performance implications of how a
               function is used.
               </li>
          <li> If the function is re-entrant.  What are its
               synchronization assumptions?
               </li>
        </ul>
        <p>
          Here is an example:
        </p>
        <CODE_SNIPPET>
          // Returns an iterator for this table.  It is the client's
          // responsibility to delete the iterator when it is done with it,
          // and it must not use the iterator once the GargantuanTable object
          // on which the iterator was created has been deleted.
          //
          // The iterator is initially positioned at the beginning of the table.
          //
          // This method is equivalent to:
          //    Iterator* iter = table-&gt;NewIterator();
          //    iter-&gt;Seek("");
          //    return iter;
          // If you are going to immediately seek to another place in the
          // returned iterator, it will be faster to use NewIterator()
          // and avoid the extra seek.
          Iterator* GetIterator() const;
        </CODE_SNIPPET>
        <p>
          However, do not be unnecessarily verbose or state the
          completely obvious.  Notice below that it is not necessary
          to say "returns false otherwise" because this is implied.
        </p>
        <CODE_SNIPPET>
          // Returns true if the table cannot hold any more entries.
          bool IsTableFull();
        </CODE_SNIPPET>
        <p>
          When commenting constructors and destructors, remember that
          the person reading your code knows what constructors and
          destructors are for, so comments that just say something like
          "destroys this object" are not useful.  Document what
          constructors do with their arguments (for example, if they
          take ownership of pointers), and what cleanup the destructor
          does.  If this is trivial, just skip the comment.  It is
          quite common for destructors not to have a header comment.
        </p>
      </SUBSECTION>

      <SUBSECTION title="Function Definitions">
        <p>
          If there is anything tricky about how a function does its
          job, the function definition should have an explanatory
          comment. For example, in the definition comment you might
          describe any coding tricks you use, give an overview of the
          steps you go through, or explain why you chose to implement
          the function in the way you did rather than using a viable
          alternative.  For instance, you might mention why it must
          acquire a lock for the first half of the function but why it
          is not needed for the second half.
        </p>
        <p>
          Note you should <em>not</em> just repeat the comments given
          with the function declaration, in the <code>.h</code> file or
          wherever.  It's okay to recapitulate briefly what the function
          does, but the focus of the comments should be on how it does it.
        </p>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Variable Comments">
    <SUMMARY>
      In general the actual name of the variable should be descriptive
      enough to give a good idea of what the variable is used for.  In
      certain cases, more comments are required.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Class Data Members">
        <p>
          Each class data member (also called an instance variable or
          member variable) should have a comment describing what it is
          used for.  If the variable can take sentinel values with
          special meanings, such as a null pointer or -1, document this.
          For example:
        </p>
        <CODE_SNIPPET>
          private:
           // Keeps track of the total number of entries in the table.
           // Used to ensure we do not go over the limit. -1 means
           // that we don't yet know how many entries the table has.
           int num_total_entries_;
        </CODE_SNIPPET>
      </SUBSECTION>

      <SUBSECTION title="Global Variables">
        <p>
          As with data members, all global variables should have a
          comment describing what they are and what they are used for.
          For example:
        </p>
        <CODE_SNIPPET>
          // The total number of tests cases that we run through in this regression test.
          const int kNumTestCases = 6;
        </CODE_SNIPPET>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Implementation Comments">
    <SUMMARY>
      In your implementation you should have comments in tricky,
      non-obvious, interesting, or important parts of your code.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="Class Data Members">
        <p>
          Tricky or complicated code blocks should have comments
          before them. Example:
        </p>
        <CODE_SNIPPET>
          // Divide result by two, taking into account that x
          // contains the carry from the add.
          for (int i = 0; i &lt; result-&gt;size(); i++) {
            x = (x &lt;&lt; 8) + (*result)[i];
            (*result)[i] = x &gt;&gt; 1;
            x &amp;= 1;
          }
        </CODE_SNIPPET>
      </SUBSECTION>
      <SUBSECTION title="Line Comments">
        <p>
          Also, lines that are non-obvious should get a comment at the
          end of the line. These end-of-line comments should be
          separated from the code by 2 spaces.  Example:
        </p>
        <CODE_SNIPPET>
          // If we have enough memory, mmap the data portion too.
          mmap_budget = max&lt;int64&gt;(0, mmap_budget - index_-&gt;length());
          if (mmap_budget &gt;= data_size_ &amp;&amp; !MmapData(mmap_chunk_bytes, mlock))
            return;  // Error already logged.
        </CODE_SNIPPET>
        <p>
          Note that there are both comments that describe what the
          code is doing, and comments that mention that an error has
          already been logged when the function returns.
        </p>
        <p>
          If you have several comments on subsequent lines, it can
          often be more readable to line them up:
        </p>
        <CODE_SNIPPET>
          DoSomething();                  // Comment here so the comments line up.
          DoSomethingElseThatIsLonger();  // Comment here so there are two spaces between
                                          // the code and the comment.
          { // One space before comment when opening a new scope is allowed,
            // thus the comment lines up with the following comments and code.
            DoSomethingElse();  // Two spaces before line comments normally.
          }
          DoSomething(); /* For trailing block comments, one space is fine. */
        </CODE_SNIPPET>
      </SUBSECTION>
      <SUBSECTION title="nullptr/NULL, true/false, 1, 2, 3...">
        <p>
          When you pass in a null pointer, boolean, or literal integer
          values to functions, you should consider adding a comment about
          what they are, or make your code self-documenting by using
          constants. For example, compare:
        </p>
        <BAD_CODE_SNIPPET>
          bool success = CalculateSomething(interesting_value,
                                            10,
                                            false,
                                            NULL);  // What are these arguments??
        </BAD_CODE_SNIPPET>
        <p>
          versus:
        </p>
        <CODE_SNIPPET>
          bool success = CalculateSomething(interesting_value,
                                            10,     // Default base value.
                                            false,  // Not the first time we're calling this.
                                            NULL);  // No callback.
        </CODE_SNIPPET>
        <p>
          Or alternatively, constants or self-describing variables:
        </p>
        <CODE_SNIPPET>
          const int kDefaultBaseValue = 10;
          const bool kFirstTimeCalling = false;
          Callback *null_callback = NULL;
          bool success = CalculateSomething(interesting_value,
                                            kDefaultBaseValue,
                                            kFirstTimeCalling,
                                            null_callback);
        </CODE_SNIPPET>
      </SUBSECTION>

      <SUBSECTION title="Don'ts">
        <p>
          Note that you should <em>never</em> describe the code
          itself. Assume that the person reading the code knows C++
          better than you do, even though he or she does not know what
          you are trying to do:
        </p>
        <BAD_CODE_SNIPPET>
           // Now go through the b array and make sure that if i occurs,
           // the next element is i+1.
           ...        // Geez.  What a useless comment.
        </BAD_CODE_SNIPPET>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Punctuation, Spelling and Grammar">
    <SUMMARY>
      Pay attention to punctuation, spelling, and grammar; it is
      easier to read well-written comments than badly written ones.
    </SUMMARY>
    <BODY>
      <p>
        Comments should be as readable as narrative text, with proper
        capitalization and punctuation. In many cases, complete sentences are
        more readable than sentence fragments. Shorter comments, such as
        comments at the end of a line of code, can sometimes be less formal, but
        you should be consistent with your style.
      </p>
      <p>
        Although it can be frustrating to have a code reviewer point
        out that you are using a comma when you should be using a
        semicolon, it is very important that source code maintain a
        high level of clarity and readability.  Proper punctuation,
        spelling, and grammar help with that goal.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="TODO Comments">
    <SUMMARY>
      Use <code>TODO</code> comments for code that is temporary, a
      short-term solution, or good-enough but not perfect.
    </SUMMARY>
    <BODY>
      <p>
        <code>TODO</code>s should include the string <code>TODO</code> in
        all caps, followed by the
        
        name, e-mail address, or other
        identifier
        of the person who can best provide context about the problem
        referenced by the <code>TODO</code>.  A colon is optional.  The main
        purpose is to have a consistent <code>TODO</code> format that can be
        searched to find the person who can provide more details upon request.
        A <code>TODO</code> is not a commitment that the person referenced
        will fix the problem.  Thus when you create a <code>TODO</code>, it is
        almost always your
        
        name
        that is given.
      </p>
      
      <CODE_SNIPPET>
        // TODO(kl@gmail.com): Use a "*" here for concatenation operator.
        // TODO(Zeke) change this to use relations.
      </CODE_SNIPPET>
      <p>
        If your <code>TODO</code> is of the form "At a future date do
        something" make sure that you either include a very specific
        date ("Fix by November 2005") or a very specific event
        ("Remove this code when all clients can handle XML responses.").
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Deprecation Comments">
    <SUMMARY>
      Mark deprecated interface points with <code>DEPRECATED</code> comments.
    </SUMMARY>
    <BODY>
      <p>
      You can mark an interface as deprecated by writing a comment containing
      the word <code>DEPRECATED</code> in all caps.  The comment goes either
      before the declaration of the interface or on the same line as the
      declaration.
      </p>
      
      <p>
      After the word <code>DEPRECATED</code>, write your name, e-mail address,
      or other identifier in parentheses.
      </p>
      <p>
      A deprecation comment must include simple, clear directions for people to
      fix their callsites.  In C++, you can implement a deprecated function as
      an inline function that calls the new interface point.
      </p>
      <p>
      Marking an interface point <code>DEPRECATED</code> will not magically
      cause any callsites to change.  If you want people to actually stop using
      the deprecated facility, you will have to fix the callsites yourself or
      recruit a crew to help you.
      </p>
      <p>
      New code should not contain calls to deprecated interface points.  Use
      the new interface point instead.  If you cannot understand the
      directions, find the person who created the deprecation and ask them for
      help using the new interface point.
      </p>
      
    </BODY>
  </STYLEPOINT>

</CATEGORY>

<CATEGORY title="Formatting">
  <p>
    Coding style and formatting are pretty arbitrary, but a
    
    project
    is much easier to follow if everyone uses the same style. Individuals
    may not agree with every aspect of the formatting rules, and some of
    the rules may take some getting used to, but it is important that all
    
    project contributors
    follow the style rules so that
    
    they
    can all read and understand everyone's code easily.
  </p>
  
  <p>
    To help you format code correctly, we've created a <A HREF="http://google-styleguide.googlecode.com/svn/trunk/google-c-style.el">settings
    file for emacs</A>.
  </p>

  <STYLEPOINT title="Line Length">
    <SUMMARY>
      Each line of text in your code should be at most 80 characters
      long.
    </SUMMARY>
    <BODY>
      
      <p>
        We recognize that this rule is controversial, but so much existing
        code already adheres to it, and we feel that consistency is
        important.
      </p>
      <PROS>
          Those who favor
          
          this rule argue
          that it is rude to force them to resize their windows and there
          is no need for anything longer.  Some folks are used to having
          several code windows side-by-side, and thus don't have room to
          widen their windows in any case.  People set up their work
          environment assuming a particular maximum window width, and 80
          columns has been the traditional standard.  Why change it?
      </PROS>
      <CONS>
          Proponents of change argue that a wider line can make code
          more readable.  The 80-column limit is an hidebound
          throwback to 1960s mainframes;
          
          modern equipment has
          wide screens that can easily show longer lines.
      </CONS>
      <DECISION>
        <p>
          
          80 characters is the maximum.
        </p>
        <p>
          Exception: if a comment line contains an example command or
          a literal URL longer than 80 characters, that line may be
          longer than 80 characters for ease of cut and paste.
        </p>
        <p>
          Exception: an <code>#include</code> statement with a long
          path may exceed 80 columns.  Try to avoid situations where this
          becomes necessary.
        </p>
        <p>
          Exception:  you needn't be concerned about
          <a href="#The__define_Guard">header guards</a>
          that exceed the maximum length.
          
        </p>
      </DECISION>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Non-ASCII Characters">
    <SUMMARY>
      Non-ASCII characters should be rare, and must use UTF-8 formatting.
    </SUMMARY>
    <BODY>
      <p>
        You shouldn't hard-code user-facing text in source, even English,
        so use of non-ASCII characters should be rare.  However, in certain
        cases it is appropriate to include such words in your code.  For
        example, if your code parses data files from foreign sources,
        it may be appropriate to hard-code the non-ASCII string(s) used in
        those data files as delimiters.  More commonly, unittest code
        (which does not
        
        need to be localized) might contain non-ASCII strings.  In such
        cases, you should use UTF-8, since that is
        
        an encoding understood by most tools able
        to handle more than just ASCII.
      </p>
      <p>
        Hex encoding is also OK, and encouraged where it enhances
        readability — for example, <code>"\xEF\xBB\xBF"</code>,
        or, even more simply, <code>u8"\uFEFF"</code>, is the
        Unicode zero-width no-break space character, which would be
        invisible if included in the source as straight UTF-8.
      </p>
      <p>
        Use the <code>u8</code> prefix to guarantee
        that a string literal containing <code>\uXXXX</code> escape
        sequences is encoded as UTF-8. Do not use it for strings containing
        non-ASCII characters encoded as UTF-8, because that will produce
        incorrect output if the compiler does not interpret the source file
        as UTF-8.
        
      </p>
      <p>
        You shouldn't use the C++11 <code>char16_t</code> and
        <code>char32_t</code> character types, since they're for
        non-UTF-8 text. For similar reasons you also shouldn't use
        <code>wchar_t</code> (unless you're writing code that
        interacts with the Windows API, which uses <code>wchar_t</code>
        extensively).
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Spaces vs. Tabs">
    <SUMMARY>
      Use only spaces, and indent 2 spaces at a time.
    </SUMMARY>
    <BODY>
      <p>
        We use spaces for indentation. Do not use tabs in your code.
        You should set your editor to emit spaces when you hit the tab
        key.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="Function Declarations and Definitions">
    <SUMMARY>
      Return type on the same line as function name, parameters on the
      same line if they fit.
    </SUMMARY>
    <BODY>
      <p>
        Functions look like this:
      </p>
      <CODE_SNIPPET>
        ReturnType ClassName::FunctionName(Type par_name1, Type par_name2) {
          DoSomething();
          ...
        }
      </CODE_SNIPPET>
      <p>
        If you have too much text to fit on one line:
      </p>
      <CODE_SNIPPET>
        ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,
                                                     Type par_name3) {
          DoSomething();
          ...
        }
      </CODE_SNIPPET>
      <p>
        or if you cannot fit even the first parameter:
      </p>
      <CODE_SNIPPET>
        ReturnType LongClassName::ReallyReallyReallyLongFunctionName(
            Type par_name1,  // 4 space indent
            Type par_name2,
            Type par_name3) {
          DoSomething();  // 2 space indent
          ...
        }
      </CODE_SNIPPET>
      <p>
        Some points to note:
      </p>
      <ul>
        <li> If you cannot fit the return type and the function name on a single
             line, break between them.
             </li>
        <li> If you break after the return type of a function definition, do not
             indent.
             </li>
        <li> The open parenthesis is always on the same line as the
             function name.
             </li>
        <li> There is never a space between the function name and the
             open parenthesis.
             </li>
        <li> There is never a space between the parentheses and the
             parameters.
             </li>
        <li> The open curly brace is always at the end of the same
             line as the last parameter.
             </li>
        <li> The close curly brace is either on the last line by itself
             or (if other style rules permit) on the same line as the
             open curly brace.
             </li>
        <li> There should be a space between the close parenthesis and
             the open curly brace.
             </li>
        <li> All parameters should be named, with identical names in the
             declaration and implementation.
             </li>
        <li> All parameters should be aligned if possible.
             </li>
        <li> Default indentation is 2 spaces.
             </li>
        <li> Wrapped parameters have a 4 space indent.
             </li>
      </ul>
      <p>
        If some parameters are unused, comment out the variable name in the
        function definition:
      </p>
      <CODE_SNIPPET>
        // Always have named parameters in interfaces.
        class Shape {
         public:
          virtual void Rotate(double radians) = 0;
        }

        // Always have named parameters in the declaration.
        class Circle : public Shape {
         public:
          virtual void Rotate(double radians);
        }

        // Comment out unused named parameters in definitions.
        void Circle::Rotate(double /*radians*/) {}
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        // Bad - if someone wants to implement later, it's not clear what the
        // variable means.
        void Circle::Rotate(double) {}
      </BAD_CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="함수 호출">
    <SUMMARY>
      자리가 충분한 경우 한 줄에 쓰고, 그렇지 않은 경우 괄호 안의 인자들을 줄바꿈한다.
    </SUMMARY>
    <BODY>
      <p>
        함수 호출은 다음과 같은 형식으로 작성한다.
      </p>
      <CODE_SNIPPET>
        bool retval = DoSomething(argument1, argument2, argument3);
      </CODE_SNIPPET>
      <p>
        인자들이 모두 한 줄에 들어갈 자리가 없다면 여러 줄로 나누어 쓰되 이어지는 줄은 첫 번째 인자와 같은 열에 오도록 한다.
        여는 괄호 다음과 닫는 괄호 앞에는 스페이스를 추가하지 않는다.
      </p>
      <CODE_SNIPPET>
        bool retval = DoSomething(averyveryveryverylongargument1,
                                  argument2, argument3);
      </CODE_SNIPPET>
      <p>
        함수의 인자가 많은 경우 가독성을 위해 인자마다 한 줄씩 쓰는 것을 고려하라
      </p>
      <CODE_SNIPPET>
        bool retval = DoSomething(argument1,
                                  argument2,
                                  argument3,
                                  argument4);
      </CODE_SNIPPET>
      <p>
        모든 인자들마다 줄바꿈하여 한 줄에 하나씩 쓰는 것도 가능하다.
      </p>
      <CODE_SNIPPET>
        if (...) {
          ...
          ...
          if (...) {
            DoSomething(
                argument1,  // 스페이스 4개로 들여쓰기
                argument2,
                argument3,
                argument4);
          }
      </CODE_SNIPPET>
      <p>
        특히 이 방식은 함수 시그너쳐가 길어서 최대 <a href="#Line_Length">줄 길이</a>에 맞출 수 없을 때 사용하는 것이 좋다.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="중괄호 초기화 리스트">
    <SUMMARY>
      중괄호로 된 리스트는 함수 호출에서와 완전히 같은 방식으로 작성한다.
    </SUMMARY>
    <BODY>
      <p>
        중괄호 리스트가 어떤 이름(타입이나 변수 이름)에 이어져서 사용되는 경우
        <code>{}</code>가 그 이름을 가진 함수를 호출하는 괄호인 것처럼 작성한다.
        만약 그러한 이름이 없으면 길이가 0인 이름이 있다고 가정한다.
      </p>
      <CODE_SNIPPET>
        // 중괄호 초기화 리스트를 한 줄에 사용한 예
        return {foo, bar};
        functioncall({foo, bar});
        pair&lt;int, int&gt; p{foo, bar};

        // 줄바꿈을 해야 할 때
        SomeFunction(
            {"assume a zero-length name before {"},
            some_other_function_parameter);
        SomeType variable{
            some, other, values,
            {"assume a zero-length name before {"},
            SomeOtherType{
                "Very long string requiring the surrounding breaks.",
                some, other values},
            SomeOtherType{"Slightly shorter string",
                          some, other, values}};
        SomeType variable{
            "This is too long to fit all in one line"};
        MyType m = {  // 여기선 { 다음에도 줄바꿈을 할 수 있다
            superlongvariablename1,
            superlongvariablename2,
            {short, interior, list},
            {interiorwrappinglist,
             interiorwrappinglist2}};
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="조건문">
    <SUMMARY>
      괄호 안에서는 스페이스를 사용하지 않은 것을 권장한다. <code>else</code> 키워드는 새 줄에서 사용한다. 
    </SUMMARY>
    <BODY>
      <p>
        기본적인 조건문에는 두 가지의 허용가능한 포맷이 있다.
        첫번째는 괄호 사이에 스페이스를 넣는 것이고 두번째는 넣지 않는 것이다.
      </p>
      <p>
        가장 흔한 형식은 스페이스를 쓰지 않는 것이다. 두 가지 모두 괜찮으나, <em>일관적이어야 한다.</em>
        어떤 파일을 수정하고 있다면 그 파일에 이미 사용되고 있는 포맷을 사용하라.
        새로운 코드를 작성하고 있다면 해당 디렉토리나 프로젝트의 다른 파일에서 사용하고 있는 포맷을 사용하라.
        이미 사용되고 있는 포맷을 알 수 없고 개인적인 선호도 없는 경우 스페이스를 넣지 말라.
      </p>
      <CODE_SNIPPET>
        if (condition) {  // 괄호 안에 스페이스 없음
          ...  // 스페이스 2개 들여쓰기
        } else if (...) {  // else문은 닫는 중괄호와 같은 줄에
          ...
        } else {
          ...
        }
      </CODE_SNIPPET>
      <p>
        만약 괄호 사이에 스페이스를 넣는 것을 선호한다면:
      </p>
      <CODE_SNIPPET>
        if ( condition ) {  // 괄호 사이 스페이스
          ...  // 스페이스 2개 들여쓰기
        } else {  // else문은 닫는 중괄호와 같은 줄에
          ...
        }
      </CODE_SNIPPET>
      <p>
        모든 경우에 <code>if</code>와 여는 괄호 사이에는 스페이스 하나가 있어야 한다.
        중괄호를 사용하는 조건문의 경우 닫는 괄호와 중괄호 사이에도 스페이스 하나를 사용해야 한다. 
      </p>
      <BAD_CODE_SNIPPET>
        if(condition)     // 나쁨 - IF 뒤에 스페이스가 없음
    if (condition){   // 나쁨 - { 앞에 스페이스가 없음 
        if(condition){    // 두 배로 나쁨
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
    if (condition) {  // 좋음 - IF 뒤와 { 앞 모두 스페이스가 있음
      </CODE_SNIPPET>
    <p>
      짧은 조건문은 가독성을 향상시키는 경우 한 줄에 작성될 수 있다.
    조건문의 길이가 짧고 <code>else</code>를 사용하지 않는 경우에만 이 방식을 사용할 수 있다.
      </p>
      <CODE_SNIPPET>
        if (x == kFoo) return new Foo();
        if (x == kBar) return new Bar();
      </CODE_SNIPPET>
    <p>
    <code>else</code>가 있으면 이 방식을 사용할 수 없다.
      </p>
    <BAD_CODE_SNIPPET>
    // 안됨 - ELSE 구문이 있는데도 IF 문을 한 줄에 사용했음
        // Not allowed - IF statement on one line when there is an ELSE clause
        if (x) DoThis();
        else DoThat();
      </BAD_CODE_SNIPPET>
    <p>
    일반적으로 한 줄짜리 구문의 경우 중괄호를 꼭 사용하지 않아도 되며, 선호하는 경우 사용하여도 된다.
    복잡한 조건이나 구문들로 이루어진 조건문과 반복문의 경우 중괄호가 있을 때 가독성이 더 좋을 수 있다.
    어떤 프로젝트들은 <code>if</code> 문에 항상 중괄호를 사용할 것을 요구하기도 한다.
      </p>
      <CODE_SNIPPET>
        if (condition)
          DoSomething();  // 스페이스 2개 들여쓰기

        if (condition) {
          DoSomething();  // 스페이스 2개 들여쓰기
        }
      </CODE_SNIPPET>
    <p>
      하지만 만약 <code>if</code>-<code>else</code> 문 중 한 쪽이 중괄호를 사용하고 있다면 다른 쪽도 반드시 사용해야 한다.
      </p>
      <BAD_CODE_SNIPPET>
        // 안됨 - IF에는 중괄호가 있지만 ELSE에는 없음
        if (condition) {
          foo;
        } else
          bar;

        // 안됨 - ELSE에는 중괄호가 있지만 IF에는 없음
        if (condition)
          foo;
        else {
          bar;
        }
      </BAD_CODE_SNIPPET>
      <CODE_SNIPPET>
        // 어느 한 쪽에 중괄호를 사용하였으면 IF 와 ELSE 모두 중괄호가 있어야 함
        if (condition) {
          foo;
        } else {
          bar;
        }
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="반복문과 switch 문">
    <SUMMARY>
      switch 문은 블록마다 중괄호를 사용할 수 있다. 단순하지 않게 이어지는 case 문들은 주석을 달아야 한다.
      비어 있는 반복문은 <code>{}</code> 또는 <code>continue</code>를 사용해야 한다.
    </SUMMARY>
    <BODY>
      <p>
        <code>switch</code>문의 <code>case</code> 블록은 선호에 따라 중괄호를 사용할 수도 있고 그렇지 않을 수 있다.
        중괄호를 사용하는 경우엔 아래와 같은 위치에 사용해야 한다.
      </p>
      <p>
        열거형 값에 대한 조건이 아닌 경우, switch 문은 항상 <code>default</code> case 를 갖는 것이 좋다.
        (열거형의 경우 처리하지 않은 값에 대해 컴파일러가 경고할 것이다.)
        만약 default case 가 실행되지 말아야 할 경우 간단히 <code>assert</code>하라:
      </p>
      
      <CODE_SNIPPET>
        switch (var) {
          case 0: {  // 스페이스 2개 들여쓰기
            ...      // 스페이스 4개 들여쓰기
            break;
          }
          case 1: {
            ...
            break;
          }
          default: {
            assert(false);
          }
        }
      </CODE_SNIPPET>
      
      
      <p>
        비어 있는 루프는 세미콜론 하나가 아닌 <code>{}</code> 또는 <code>continue</code>를 사용하는 것이 좋다.
      </p>
      <CODE_SNIPPET>
        while (condition) {
          // 조건이 false가 될 때까지 반복한다.
        }
        for (int i = 0; i &lt; kSomeNumber; ++i) {}  // 좋음 - 비어 있는 루프
        while (condition) continue;  // 좋음 - continue로 로직이 없음을 명시함
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        while (condition);  // 나쁨 - do/while 루프의 일부분으로 보임
      </BAD_CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="포인터와 레퍼런스 표현식">
    <SUMMARY>
		마침표나 화살표 좌우에는 스페이스를 사용하지 않는
		다. 포인터 연산자 뒤에는 스페이스를 사용하지 않는다.
    </SUMMARY>
    <BODY>
      <p>
		  다음은 올바르게 작성된 포인터와 레퍼런스 표현식의
		  예이다.
      </p>
      <CODE_SNIPPET>
        x = *p;
        p = &amp;x;
        x = r.y;
        x = r-&gt;y;
      </CODE_SNIPPET>
      <p>
        다음에 주목하라:
      </p>
      <ul>
		  <li> 멤버에 접근할 때 사용하는 마침표나 화살표 좌우
			  에는 스페이스를 사용하지 않는다.
             </li>
        <li> 포인터 연산자 <code>*</code>나 <code>&amp;</code> 뒤에는 스페이스를 사용하지 않는다.
             </li>
      </ul>
      <p>
        포인터 변수나 인자를 선언할 때 *를 타입에 붙여서 써도 되고, 변수 이름에 붙여서 써도 된다.
      </p>
      <CODE_SNIPPET>
        // 앞쪽에 스페이스가 있으므로 괜찮음
        char *c;
        const string &amp;str;

        // 뒤쪽에 스페이스가 있으므로 괜찮음
        char* c;    // 하지만 다음과 같이 할 것을 유의: "char* c, *d, *e, ...;"!
        const string&amp; str;
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        char * c;  // 나쁨 - * 양쪽에 스페이스가 있음
        const string &amp; str;  // 나쁨 - &amp; 양쪽에 스페이스가 있음
      </BAD_CODE_SNIPPET>
      <p>
        이것은 하나의 파일 안에서 일관성 있게 작성되어야 한다. 그러므로 파일을 수정하는 경우 그 파일이 사용하는 스타일을 사용하라.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="불린 표현식">
    <SUMMARY>
      <a href="#Line_Length">정해진 줄 길이</a>보다 긴 불린 표현식을 사용해야 할 때에는 줄바꿈을 일관성있게 해야 한다.
    </SUMMARY>
    <BODY>
      <p>
        이 예시에서는 논리적 AND 연산자가 항상 줄의 마지막에 있다:
      </p>
      <CODE_SNIPPET>
        if (this_one_thing &gt; this_other_thing &amp;&amp;
            a_third_thing == a_fourth_thing &amp;&amp;
            yet_another &amp;&amp; last_one) {
          ...
        }
      </CODE_SNIPPET>
      <p>
        이 예시에서 줄바꿈한 경우 <code>&amp;&amp;</code> 연산자가 모두 줄의 마지막에 있었음에 주목하라.
        이 방식은 구글의 코드에서 일반적이나, 모든 연산자가 줄의 시작 부분에 오도록 줄바꿈하는 것도 허용된다.
        가독성을 높이는 것에 도움이 될 경우 추가적인 괄호를 적절히 사용하여도 좋다.
        또한 <code>and</code>나 <code>compl</code>과 같은 단어로 된 연산자보다
        <code>&amp;&amp;</code>와 <code>~</code>와 같은 기호 연산자를 사용하는 것이 좋다.
      </p>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="리턴값">
    <SUMMARY>
      <code>return</code> 표현식을 불필요하게 괄호로 묶지 않아야 한다.
    </SUMMARY>
    <BODY>
      <p>
        <code>return expr;</code>에서의 괄호는 <code>x = expr;</code> 에서 필요할 때에만 사용한다.
      </p>
      <CODE_SNIPPET>
        return result;                  // 괄호 사용이 필요없는 간단한 경우
        return (some_long_condition &amp;&amp;  // 복잡한 표현식의 가독성을 높일 수 있다면
                another_condition);     //     괄호의 사용이 허용된다.
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        return (value);                // var = (value) 라고 쓰는 경우는 없다.
        return(result);                // return 은 함수가 아니다!
      </BAD_CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  

  <STYLEPOINT title="변수와 배열 초기화">
    <SUMMARY>
      <code>=</code>, <code>()</code>, <code>{}</code> 중에서 선택할 수 있다.
    </SUMMARY>
    <BODY>
      <p>
        <code>=</code>, <code>()</code>, <code>{}</code> 를 적절히 선택할 수 있다. 다음 경우가 모두 허용된다.
      </p>
      <CODE_SNIPPET>
        int x = 3;
        int x(3);
        int x{3};
        string name = "Some Name";
        string name("Some Name");
        string name{"Some Name"};
      </CODE_SNIPPET>
      <p>
        <code>initializer_list</code> 생성자가 있는 타입에서 <code>{}</code>를 사용할 때는 주의해야 한다. 
        <code>{}</code> 문법은 항상 <code>initializer_list</code> 생성자로 가는 우선순위가 있다.
        <code>initializer_list</code>가 아닌 생성자를 사용하고자 하는 경우 <code>()</code>를 사용하라.
      </p>
      <CODE_SNIPPET>
        vector&lt;int&gt; v(100, 1);  // 100개의 1을 포함하는 벡터
        vector&lt;int&gt; v{100, 1};  // 100, 1의 두 원소가 있는 벡터
      </CODE_SNIPPET>
      <p>
        또한 중괄호 형식은 정밀도를 낮추는 타입 캐스트를 막아주므로 특정 프로그래밍 에러를 미연에 방지할 수 있다.
      </p>
      <CODE_SNIPPET>
        int pi(3.14);  // 좋음 -- pi == 3.
        int pi{3.14};  // 컴파일 에러: 정밀도를 낮추는 캐스트
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="전처리기 지시자">
    <SUMMARY>
      전처리기 지시자 시작 부분에 사용되는 # 기호는 항상 그 줄의 처음에 있어야 한다.
    </SUMMARY>
    <BODY>
      <p>
        전처리기 지시자가 들여쓰기된 코드의 내부에 있을 때에도 줄의 처음부터 시작해야 한다.
      </p>
      <CODE_SNIPPET>
        // 좋음 - 지시자가 줄의 처음부터 시작하는 예
          if (lopsided_score) {
        #if DISASTER_PENDING      // 좋음 -- 줄의 처음부터 시작함
            DropEverything();
        # if NOTIFY               // # 다음의 스페이스는 허용되지만 필수는 아니다.
            NotifyClient();
        # endif
        #endif
            BackToNormal();
          }
      </CODE_SNIPPET>
      <BAD_CODE_SNIPPET>
        // 나쁨 - 지시자가 들여쓰기되어 있음
          if (lopsided_score) {
            #if DISASTER_PENDING  // 틀림! "#if"는 줄의 처음에 있어야 함
            DropEverything();
            #endif                // 틀림! "#endif"를 들여쓰기해서는 안됨
            BackToNormal();
          }
      </BAD_CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="클래스 포맷">
    <SUMMARY>
      <code>public</code>, <code>protected</code>, <code>private</code> 순서로 각각 스페이스 하나씩 들여쓰기하여 클래스 본문을 구성한다.
    </SUMMARY>
    <BODY>
      <p>
        기본적인 포맷은 다음과 같다(주석 제외; 주석에 대해서는 <a href="#Class_Comments">클래스 주석</a> 참조):
      </p>
      <CODE_SNIPPET>
        class MyClass : public OtherClass {
         public:      // 스페이스 하나 들여쓰기에 주목!
          MyClass();  // 보통의 스페이스 2개 들여쓰기
          explicit MyClass(int var);
          ~MyClass() {}

          void SomeFunction();
          void SomeFunctionThatDoesNothing() {
          }

          void set_some_var(int var) { some_var_ = var; }
          int some_var() const { return some_var_; }

         private:
          bool SomeInternalFunction();

          int some_var_;
          int some_other_var_;
          DISALLOW_COPY_AND_ASSIGN(MyClass);
        };
      </CODE_SNIPPET>
      <p>
        주목할 점들:
      </p>
      <ul>
        <li> 줄 길이 제한에 위배되지 않는 한 상위 클래스 이름은 하위 클래스 이름과 같은 줄에 있어야 한다.
             </li>
        <li> <code>public:</code>, <code>protected:</code>, <code>private:</code> 키워드는 스페이스 하나로 들여쓰기한다.
             </li>
        <li> 첫 번째로 사용되는 경우를 제외하고는 이들 키워드의 이전에 비어 있는 줄을 삽입한다.
             작은 클래스의 경우 이 규칙은 필수사항이 아니다.       
             </li>
        <li> 이들 키워드 이후에는 빈 줄을 삽입하지 않는다.
             </li>
        <li> <code>public</code> 부분이 처음으로 와야 하고, 그 다음으로 <code>protected</code> 부분이, 마지막으로 <code>private</code> 부분을 작성한다.
             </li>
        <li> 이들 각각의 내부에서 사용되는 선언문의 순서에 관해서는 <a HREF="#Declaration_Order">선언 순서</a>를 참조한다.
             </li>
      </ul>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="생성자 초기화 리스트">
    <SUMMARY>
      생성자 초기화 리스트는 모두 한 줄에 쓰거나, 스페이스 4개로 들여쓰기하여 각각 다음 줄에 작성할 수 있다.
    </SUMMARY>
    <BODY>
      <p>
        다음은 초기화 리스트로 허용가능한 두 가지의 포맷이다:
      </p>
      <CODE_SNIPPET>
        // 모두 한 줄에 쓸 수 있는 경우
        MyClass::MyClass(int var) : some_var_(var), some_other_var_(var + 1) {}
      </CODE_SNIPPET>
      <p>
        or
      </p>
      <CODE_SNIPPET>
        // 여러 줄에 써야 할 경우 스페이스 4개로 들여쓰기하고 : 기호를 초기화 리스트의 첫 번째 줄에 쓴다.
        MyClass::MyClass(int var)
            : some_var_(var),             // 스페이스 4개 들여쓰기
              some_other_var_(var + 1) {  // 줄맞춤
          ...
          DoSomething();
          ...
        }
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="네임스페이스 포매팅">
    <SUMMARY>
      네임스페이스의 내부는 들여쓰기하지 않는다.
    </SUMMARY>
    <BODY>
      <p>
        <a href="#Namespaces">네임스페이스</a>는 들여쓰기를 증가시키지 않는다. 
      </p>
      <CODE_SNIPPET>
        namespace {

        void foo() {  // 맞음. 네임스페이스 내부에 추가적인 들여쓰기 없음
          ...
        }

        }  // namespace
      </CODE_SNIPPET>
      <p>
        네임스페이스 내부에 추가적으로 들여쓰기를 하지 않는다.
      </p>
      <BAD_CODE_SNIPPET>
        namespace {

          // 틀림. 들여쓰기를 하지 말아야 함
          void foo() {
            ...
          }

        }  // namespace
      </BAD_CODE_SNIPPET>
      <p>
        중첩된 네임스페이스를 사용할 경우 각각을 한 줄에 작성한다.
      </p>
      <CODE_SNIPPET>
        namespace foo {
        namespace bar {
      </CODE_SNIPPET>
    </BODY>
  </STYLEPOINT>

  <STYLEPOINT title="가로 공백">
    <SUMMARY>
      가로 공백을 사용하는 것은 경우에 따라 다르다. 줄 끝에는 공백 문자를 사용하지 않는다.
    </SUMMARY>
    <BODY>
      <SUBSECTION title="일반 사항">
        <CODE_SNIPPET>
        void f(bool b) {  // 여는 중괄호 앞에는 항상 스페이스가 있어야 함
          ...
        int i = 0;  // 세미콜론 앞에는 대개 스페이스가 없음
        int x[] = { 0 };  // 중괄호 초기화 리스트 내부의 스페이스는 선택사항이다.
        int x[] = {0};    // 사용할 경우엔 양 쪽에 모두 사용해야 한다!
        // 상속과 초기화 리스트의 콜론 전후에는 스페이스를 사용한다.
        class Foo : public Bar {
         public:
          // 인라인 함수 구현에는 중괄호와 구현체 사이에 스페이스를 사용한다.
          Foo(int b) : Bar(), baz_(b) {}  // 빈 중괄호 사이에는 스페이스를 사용하지 않음
          void Reset() { baz_ = 0; }  // 중괄호와 구현체를 구분하는 스페이스
          ...
        </CODE_SNIPPET>
        <p>
          줄 끝에 공백문자를 사용하면 같은 파일을 수정, 머지하거나 줄 끝의 공백문자를 삭제하는 다른 사람들이 할 일이 늘어난다.
          그러므로 줄 끝에는 공백문자를 사용하지 말라. 
          이미 해당 줄을 수정하고 있다면 삭제하고, 그렇지 않다면 별도의 정리 작업을 통해서 삭제하라. (가능하면 다른 사람이 그 파일을 사용하고 있지 않을 때)
        </p>
      </SUBSECTION>
      <SUBSECTION title="반복문과 조건문">
        <CODE_SNIPPET>
        if (b) {          // 조건문과 반복문 키워드 다음에 스페이스
        } else {          // else 전후에 스페이스
        }
        while (test) {}   // 대개 괄호 사이에는 스페이스 없음
        switch (i) {
        for (int i = 0; i &lt; 5; ++i) {
        switch ( i ) {    // 반복문과 조건문의 괄호 사이에는 스페이스가 있을 수 있지만
        if ( test ) {     // 드문 경우이다. 일관성 있게 사용하라
        for ( int i = 0; i &lt; 5; ++i ) {
        for ( ; i &lt; 5 ; ++i) {  // for 반복문은 항상 세미콜론 다음에 스페이스를 사용하며
          ...                   // 세미콜론 이전에 스페이스를 사용할 수도 있다.
        for (auto x : counts) {  // Range-based for 반복문은 항상 
          ...                    // : 전후에 스페이스를 사용한다.
        }
        switch (i) {
          case 1:         // 스위치 문의 case 에서는 : 전에 스페이스가 없음
            ...
          case 2: break;  // 코드가 뒤에 있는 경우 : 다음에 스페이스를 사용함
        </CODE_SNIPPET>
      </SUBSECTION>
      <SUBSECTION title="연산자">
        <CODE_SNIPPET>
        x = 0;              // 대입 연산자 전후에는 항상 스페이스를 사용

        x = -5;             // 단항 연산자와 그 인자 사이에는 
        ++x;                // 스페이스를 사용하지 않는다.
        if (x &amp;&amp; !y)
          ...
        v = w * x + y / z;  // 이진 연산자는 대개 좌우에 스페이스를 사용하지만
        v = w*x + y/z;      // 각 항마다 스페이스를 사용하지 않는 것도 허용한다
        v = w * (x + z);    // 괄호 사이에는 스페이스가 없는 것이 좋다.
        </CODE_SNIPPET>
      </SUBSECTION>
      <SUBSECTION title="템플릿과 캐스트">
        <CODE_SNIPPET>
        vector&lt;string&gt; x;           // 꺾쇠(&lt;와 &gt;) 사이와 &lt; 이전,
        y = static_cast&lt;char*&gt;(x);  // 캐스트의 &gt;( 사이에는 
                                    // 스페이스를 사용하지 않는다.
        vector&lt;char *&gt; x;           // 타입과 포인터 사이의 스페이스는 허용되지만
                                    // 일관성이 있어야 한다.
        set&lt;list&lt;string&gt;&gt; x;        // C++11 코드에서 허용됨
        set&lt;list&lt;string&gt; &gt; x;       // C++03 은 &gt; &gt;를 사용해야 한다.
        set&lt; list&lt;string&gt; &gt; x;      // 대칭을 위해 선택적으로
                                    // &lt; &lt;에도 스페이스를 사용할 수 있다.
        </CODE_SNIPPET>
      </SUBSECTION>
    </BODY>
  </STYLEPOINT>


  <STYLEPOINT title="세로 공백">
    <SUMMARY>
      세로 공백의 사용을 최소화하라
    </SUMMARY>
    <BODY>
      <p>
        이것은 규칙보단 원리(principle)에 가깝다. 꼭 필요한 경우가 
        아니면 빈 줄을 사용하지 말라. 특히, 함수 사이에 한 개 또는 
        두 개보다 많은 빈 줄을 추가하지 말라. 함수를 시작할 때에 
        비어 있는 줄로 시작하지 않도록 노력하고, 끝낼 때에도 빈 줄을
        사용하지 않아야 한다. 함수 내부에서도 빈 줄 사용을 절제하라
      </p>
      <p>
        기본 원리는: 더 많은 코드가 스크린에 들어올수록 프로그램의
        제어흐름을 따라가고 이해하기가 쉬워진다는 것이다. 물론
        지나치게 조밀한 코드도 지나치게 펼쳐진 코드만큼 가독성을 
        해칠 수 있으므로 각자 판단에 따르도록 한다. 하지만 
        세로 공백의 사용을 전반적으로 최소화하라.
      </p>
      <p>
        빈 줄 사용이 유용할 수 있는 몇 가지 기본 규칙:
      </p>
      <ul>
        <li> 함수의 시작이나 끝에 사용하는 빈 줄은 가독성에 거의 도움을 주지 않는다.
             </li>
        <li> if-else 체인의 내부에 있는 빈 줄은 가독성에 도움을 줄 수 있다.
             </li>
      </ul>
    </BODY>
  </STYLEPOINT>
</CATEGORY>

<CATEGORY title="규칙의 예외사항">
  <p>
    지금까지 설명한 코딩 컨벤션은 강제적이지만 모든 좋은 규칙처럼 이것에는 예외사항이 있으며, 그 예외사항을 여기에서 다룬다.
  </p>

  

  <STYLEPOINT title="규칙을 지키지 않는 기존 코드">
    <SUMMARY>
      이 스타일 가이드를 따르지 않는 코드를 다룰 때에는 규칙을 지키지 않을 수 있다.
    </SUMMARY>
    <BODY>
      <p>
        이 가이드가 아닌 다른 규칙에 따라 작성된 코드를 수정하는 경우엔
        이 규칙이 아닌 그 코드의 컨벤션에 따라 일관성있게 코드를 작성해야 한다.
        어떻게 작성해야 할 지 명확하지 않은 경우 그 코드의 원작자나 현재 담당자에게 문의하라.
        <em>일관성</em>은 파일 내의 일관성도 포함한다는 것을 기억하라.
      </p>
    </BODY>
  </STYLEPOINT>

  

  <STYLEPOINT title="윈도우 코드">
    <SUMMARY>
      윈도우 프로그래머는 그들만의 코딩 컨벤션을 발전시켜왔으며, 대개 
      윈도우 헤더와 다른 마이크로소프트 코드의 컨벤션을 따른다.
      당신의 코드를 모두가 이해하기 쉽게 하기 위해 모든 플랫폼에서
      C++를 작성할 때 모두가 하나의 가이드라인을 따른다.
    </SUMMARY>
    <BODY>
      <p>
        윈도우 스타일의 코드에 익숙해져 있다면 가이드라인의 몇몇 부분을 복습하는 것이 유익하다.
      </p>
      <ul>
        <li> 헝가리안 표기법을 사용하지 않는다. (예를 들어 정수를 <code>iNum</code>로 이름짓기)
             소스 파일의 <code>.cc</code> 확장자를 포함하여 구글의 작명 컨벤션을 사용해야 한다.
             </li>
        <li> 윈도우는 <code>DWORD</code>, <code>HANDLE</code>등과 같은 그들만의 타입 동의어를 정의한다.
             이것들을 윈도우 API 함수를 호출할 때 사용하는 것은 전혀 문제가 없고 사용이 권장된다.       
             하지만 가능한 실제 C++ 타입과 가장 가까운 것을 사용하도록 한다. 예를 들면,
             <code>LPCTSTR</code>보다 <code>const TCHAR *</code>를 사용하는 것이 좋다.
             </li>
        <li> When compiling with Microsoft Visual C++, set the
             compiler to warning level 3 or higher, and treat all
             warnings as errors.
             </li>
        <li> Do not use <code>#pragma once</code>; instead use the
             standard Google include guards.  The path in the include
             guards should be relative to the top of your project
             tree.
             </li>
        <li> In fact, do not use any nonstandard extensions, like
             <code>#pragma</code> and <code>__declspec</code>, unless you
             absolutely must.  Using <code>__declspec(dllimport)</code> and
             <code>__declspec(dllexport)</code> is allowed; however, you
             must use them through macros such as <code>DLLIMPORT</code>
             and <code>DLLEXPORT</code>, so that someone can easily disable
             the extensions if they share the code.
             </li>
      </ul>
      <p>
        However, there are just a few rules that we occasionally need
        to break on Windows:
      </p>
      <ul>
        <li> Normally we <a HREF="#Multiple_Inheritance">forbid
             the use of multiple implementation inheritance</a>; however,
             it is required when using COM and some ATL/WTL
             classes. You may use multiple implementation inheritance
             to implement COM or ATL/WTL classes and interfaces.
             </li>
        <li> Although you should not use exceptions in your own code,
             they are used extensively in the ATL and some STLs,
             including the one that comes with Visual C++. When using
             the ATL, you should define <code>_ATL_NO_EXCEPTIONS</code> to
             disable exceptions. You should investigate whether you can
             also disable exceptions in your STL, but if not, it is OK to
             turn on exceptions in the compiler. (Note that this is
             only to get the STL to compile. You should still not
             write exception handling code yourself.)
             </li>
        <li> The usual way of working with precompiled headers is to
             include a header file at the top of each source file,
             typically with a name like <code>StdAfx.h</code> or
             <code>precompile.h</code>. To make your code easier to share
             with other projects, avoid including this file explicitly
             (except in <code>precompile.cc</code>), and use the
             <code>/FI</code> compiler option to include the file
             automatically.
             </li>
        <li> Resource headers, which are usually named
             <code>resource.h</code> and contain only macros, do not need
             to conform to these style guidelines.
             </li>
      </ul>
    </BODY>
  </STYLEPOINT>

  
</CATEGORY>

<PARTING_WORDS>
  <p>
    상식을 사용하고 <em>일관성</em>있게 작성하라.
  </p>
  <p>
    코드를 수정하는 경우 몇 분 정도 주변의 코드를 살펴보고 그것의 스타일을 판단하라.
    그 코드가 <code>if</code>문 주변에 스페이스를 사용한다면 당신도 그래야 한다.
    만약 그 코드의 주석들이 작은 박스와 별표들을 사용한다면 
    당신의 코드도 작은 박스와 별표를 사용해야 한다.
  </p>
  <p>
    스타일 가이드라인의 요점은 코딩에 있어서 공통적인 어휘를 가짐으로써
    사람들이 당신이 말하는 방식보다 내용에 집중할 수 있게 하기 위함이고,
    여기에 전체적인 스타일 규칙을 소개하는 것은 사람들이 그 어휘를
    알게 하기 위함이다. 하지만 부분적인 스타일 규칙도 중요하다.
    어떤 파일에 다른 부분과 심하게 달라 보이는 코드를 추가하는 경우
    그 불연속성은 다른 사람들이 그 코드를 읽는 리듬을 벗어나게 할 것이다.
    그렇게 하지 말도록 하자.
  </p>
  
  <p>
    그러면 코드를 쓰는 방법에 대해서 충분히 쓴 것 같다. 코드 자체가 더 재미있을 것이다. 
    즐거운 코딩!
  </p>
</PARTING_WORDS>

<HR/>

<p align="right">
Revision 3.274
</p>



<address>
Benjy Weinberger<br/>
Craig Silverstein<br/>
Gregory Eitzmann<br/>
Mark Mentovai<br/>
Tashana Landray
</address>

</GUIDE>
